services:
  # --- MySQL ---
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: im_db
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./pkg/sql/tables.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped

  # --- Redis ---
  redis:
    image: redis:7.0
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped

  # --- etcd ---
  etcd:
    image: bitnami/etcd:latest
    container_name: etcd
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
    ports:
      - "2379:2379"
    restart: unless-stopped

  # --- Kafka ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    restart: unless-stopped

    # --- MinIO ---
  minio:
    image: minio/minio:RELEASE.2024-04-18T19-09-19Z
    container_name: minio
    ports:
      - "9000:9000"    # MinIO API 端口
      - "9001:9001"    # 控制台端口
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    restart: unless-stopped

  # --- user-rpc 服务 ---
  user-rpc:
    build:
      context: .
      dockerfile: deploy/Dockerfile.user
    container_name: user-rpc
    ports:
      - "10000:10000"
    depends_on:
      - mysql
      - redis
      - etcd
      - kafka
    environment:
      - ETCD_ADDR=etcd:2379
      - MYSQL_DSN=user:password@tcp(mysql:3306)/im_db?charset=utf8mb4&parseTime=True&loc=Local
      - REDIS_ADDR=redis:6379
      - KAFKA_BROKERS=kafka:29092
    restart: unless-stopped

  # --- web-api 服务 ---
  web-api:
    build:
      context: .
      dockerfile: deploy/Dockerfile.web
    container_name: web-api
    ports:
      - "8080:8080"
    depends_on:
      - user-rpc
      - etcd
      - mysql
      - redis
    environment:
      - ETCD_ADDR=etcd:2379
      - MYSQL_DSN=user:password@tcp(mysql:3306)/im_db?charset=utf8mb4&parseTime=True&loc=Local
      - REDIS_ADDR=redis:6379
    restart: unless-stopped

  # --- UI 服务 ---

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "10010:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    restart: unless-stopped

  etcdkeeper:
    image: evildecay/etcdkeeper:latest
    container_name: etcdkeeper
    ports:
      - "10011:8080"  # 映射本机端口，可自定义
    environment:
      - ETCD_ENDPOINTS=http://etcd:2379
    depends_on:
      - etcd
    restart: unless-stopped

volumes:
  mysql_data:
  minio_data:
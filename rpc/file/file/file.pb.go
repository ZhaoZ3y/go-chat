// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.4
// source: file.proto

package file

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 文件信息
type FileInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	OriginalName  string                 `protobuf:"bytes,3,opt,name=original_name,json=originalName,proto3" json:"original_name,omitempty"`
	FilePath      string                 `protobuf:"bytes,4,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	FileUrl       string                 `protobuf:"bytes,5,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	FileType      string                 `protobuf:"bytes,6,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"` // image, video, audio, document, etc.
	FileSize      int64                  `protobuf:"varint,7,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	MimeType      string                 `protobuf:"bytes,8,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Hash          string                 `protobuf:"bytes,9,opt,name=hash,proto3" json:"hash,omitempty"` // 文件hash值，用于去重
	UserId        int64                  `protobuf:"varint,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status        int32                  `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"` // 1:正常 2:已删除
	CreateAt      int64                  `protobuf:"varint,12,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	UpdateAt      int64                  `protobuf:"varint,13,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_file_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{0}
}

func (x *FileInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FileInfo) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileInfo) GetOriginalName() string {
	if x != nil {
		return x.OriginalName
	}
	return ""
}

func (x *FileInfo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileInfo) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *FileInfo) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *FileInfo) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileInfo) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *FileInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *FileInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FileInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FileInfo) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *FileInfo) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

// 上传文件请求
type UploadFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileData      []byte                 `protobuf:"bytes,1,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	MimeType      string                 `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	UserId        int64                  `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FileType      string                 `protobuf:"bytes,5,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadFileRequest) Reset() {
	*x = UploadFileRequest{}
	mi := &file_file_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileRequest) ProtoMessage() {}

func (x *UploadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileRequest.ProtoReflect.Descriptor instead.
func (*UploadFileRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{1}
}

func (x *UploadFileRequest) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *UploadFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *UploadFileRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *UploadFileRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UploadFileRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

// 上传文件响应
type UploadFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        int64                  `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileUrl       string                 `protobuf:"bytes,2,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadFileResponse) Reset() {
	*x = UploadFileResponse{}
	mi := &file_file_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadFileResponse) ProtoMessage() {}

func (x *UploadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadFileResponse.ProtoReflect.Descriptor instead.
func (*UploadFileResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{2}
}

func (x *UploadFileResponse) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *UploadFileResponse) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *UploadFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UploadFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 分块上传初始化请求
type InitUploadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	MimeType      string                 `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	FileSize      int64                  `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	UserId        int64                  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FileType      string                 `protobuf:"bytes,6,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	Hash          string                 `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitUploadRequest) Reset() {
	*x = InitUploadRequest{}
	mi := &file_file_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitUploadRequest) ProtoMessage() {}

func (x *InitUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitUploadRequest.ProtoReflect.Descriptor instead.
func (*InitUploadRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{3}
}

func (x *InitUploadRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *InitUploadRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *InitUploadRequest) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *InitUploadRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InitUploadRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *InitUploadRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// 分块上传初始化响应
type InitUploadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UploadId      string                 `protobuf:"bytes,1,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	ChunkSize     int32                  `protobuf:"varint,2,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	TotalChunks   int32                  `protobuf:"varint,3,opt,name=total_chunks,json=totalChunks,proto3" json:"total_chunks,omitempty"`
	Success       bool                   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitUploadResponse) Reset() {
	*x = InitUploadResponse{}
	mi := &file_file_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitUploadResponse) ProtoMessage() {}

func (x *InitUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitUploadResponse.ProtoReflect.Descriptor instead.
func (*InitUploadResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{4}
}

func (x *InitUploadResponse) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *InitUploadResponse) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *InitUploadResponse) GetTotalChunks() int32 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

func (x *InitUploadResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InitUploadResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 分块上传请求
type UploadChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UploadId      string                 `protobuf:"bytes,1,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	ChunkIndex    int32                  `protobuf:"varint,2,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	ChunkData     []byte                 `protobuf:"bytes,3,opt,name=chunk_data,json=chunkData,proto3" json:"chunk_data,omitempty"`
	ChunkHash     string                 `protobuf:"bytes,4,opt,name=chunk_hash,json=chunkHash,proto3" json:"chunk_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadChunkRequest) Reset() {
	*x = UploadChunkRequest{}
	mi := &file_file_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChunkRequest) ProtoMessage() {}

func (x *UploadChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChunkRequest.ProtoReflect.Descriptor instead.
func (*UploadChunkRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{5}
}

func (x *UploadChunkRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *UploadChunkRequest) GetChunkIndex() int32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *UploadChunkRequest) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

func (x *UploadChunkRequest) GetChunkHash() string {
	if x != nil {
		return x.ChunkHash
	}
	return ""
}

// 分块上传响应
type UploadChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadChunkResponse) Reset() {
	*x = UploadChunkResponse{}
	mi := &file_file_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadChunkResponse) ProtoMessage() {}

func (x *UploadChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadChunkResponse.ProtoReflect.Descriptor instead.
func (*UploadChunkResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{6}
}

func (x *UploadChunkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UploadChunkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 完成分块上传请求
type CompleteUploadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UploadId      string                 `protobuf:"bytes,1,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	UserId        int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteUploadRequest) Reset() {
	*x = CompleteUploadRequest{}
	mi := &file_file_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteUploadRequest) ProtoMessage() {}

func (x *CompleteUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteUploadRequest.ProtoReflect.Descriptor instead.
func (*CompleteUploadRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{7}
}

func (x *CompleteUploadRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *CompleteUploadRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 完成分块上传响应
type CompleteUploadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        int64                  `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileUrl       string                 `protobuf:"bytes,2,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteUploadResponse) Reset() {
	*x = CompleteUploadResponse{}
	mi := &file_file_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteUploadResponse) ProtoMessage() {}

func (x *CompleteUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteUploadResponse.ProtoReflect.Descriptor instead.
func (*CompleteUploadResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{8}
}

func (x *CompleteUploadResponse) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *CompleteUploadResponse) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *CompleteUploadResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CompleteUploadResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 下载文件请求
type DownloadFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        int64                  `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	UserId        int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadFileRequest) Reset() {
	*x = DownloadFileRequest{}
	mi := &file_file_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileRequest) ProtoMessage() {}

func (x *DownloadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileRequest.ProtoReflect.Descriptor instead.
func (*DownloadFileRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{9}
}

func (x *DownloadFileRequest) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *DownloadFileRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 下载文件响应
type DownloadFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileData      []byte                 `protobuf:"bytes,1,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	MimeType      string                 `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Success       bool                   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadFileResponse) Reset() {
	*x = DownloadFileResponse{}
	mi := &file_file_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileResponse) ProtoMessage() {}

func (x *DownloadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileResponse.ProtoReflect.Descriptor instead.
func (*DownloadFileResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{10}
}

func (x *DownloadFileResponse) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *DownloadFileResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DownloadFileResponse) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *DownloadFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DownloadFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 获取文件信息请求
type GetFileInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        int64                  `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	UserId        int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileInfoRequest) Reset() {
	*x = GetFileInfoRequest{}
	mi := &file_file_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileInfoRequest) ProtoMessage() {}

func (x *GetFileInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileInfoRequest.ProtoReflect.Descriptor instead.
func (*GetFileInfoRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{11}
}

func (x *GetFileInfoRequest) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *GetFileInfoRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 获取文件信息响应
type GetFileInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileInfo      *FileInfo              `protobuf:"bytes,1,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileInfoResponse) Reset() {
	*x = GetFileInfoResponse{}
	mi := &file_file_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileInfoResponse) ProtoMessage() {}

func (x *GetFileInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileInfoResponse.ProtoReflect.Descriptor instead.
func (*GetFileInfoResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{12}
}

func (x *GetFileInfoResponse) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

func (x *GetFileInfoResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetFileInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 获取文件列表请求
type GetFileListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FileType      string                 `protobuf:"bytes,2,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"` // 文件类型过滤，空字符串表示所有类型
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileListRequest) Reset() {
	*x = GetFileListRequest{}
	mi := &file_file_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileListRequest) ProtoMessage() {}

func (x *GetFileListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileListRequest.ProtoReflect.Descriptor instead.
func (*GetFileListRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{13}
}

func (x *GetFileListRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFileListRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *GetFileListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetFileListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 获取文件列表响应
type GetFileListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Files         []*FileInfo            `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileListResponse) Reset() {
	*x = GetFileListResponse{}
	mi := &file_file_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileListResponse) ProtoMessage() {}

func (x *GetFileListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileListResponse.ProtoReflect.Descriptor instead.
func (*GetFileListResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{14}
}

func (x *GetFileListResponse) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *GetFileListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 删除文件请求
type DeleteFileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        int64                  `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	UserId        int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFileRequest) Reset() {
	*x = DeleteFileRequest{}
	mi := &file_file_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileRequest) ProtoMessage() {}

func (x *DeleteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileRequest.ProtoReflect.Descriptor instead.
func (*DeleteFileRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteFileRequest) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *DeleteFileRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 删除文件响应
type DeleteFileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFileResponse) Reset() {
	*x = DeleteFileResponse{}
	mi := &file_file_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileResponse) ProtoMessage() {}

func (x *DeleteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileResponse.ProtoReflect.Descriptor instead.
func (*DeleteFileResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteFileResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteFileResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 生成预签名URL请求
type GeneratePresignedUrlRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	MimeType      string                 `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	UserId        int64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExpireTime    int64                  `protobuf:"varint,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"` // 过期时间(秒)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeneratePresignedUrlRequest) Reset() {
	*x = GeneratePresignedUrlRequest{}
	mi := &file_file_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeneratePresignedUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePresignedUrlRequest) ProtoMessage() {}

func (x *GeneratePresignedUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePresignedUrlRequest.ProtoReflect.Descriptor instead.
func (*GeneratePresignedUrlRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{17}
}

func (x *GeneratePresignedUrlRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *GeneratePresignedUrlRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *GeneratePresignedUrlRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GeneratePresignedUrlRequest) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

// 生成预签名URL响应
type GeneratePresignedUrlResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UploadUrl     string                 `protobuf:"bytes,1,opt,name=upload_url,json=uploadUrl,proto3" json:"upload_url,omitempty"`
	FileKey       string                 `protobuf:"bytes,2,opt,name=file_key,json=fileKey,proto3" json:"file_key,omitempty"`
	ExpireTime    int64                  `protobuf:"varint,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	Success       bool                   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeneratePresignedUrlResponse) Reset() {
	*x = GeneratePresignedUrlResponse{}
	mi := &file_file_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeneratePresignedUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePresignedUrlResponse) ProtoMessage() {}

func (x *GeneratePresignedUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePresignedUrlResponse.ProtoReflect.Descriptor instead.
func (*GeneratePresignedUrlResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{18}
}

func (x *GeneratePresignedUrlResponse) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

func (x *GeneratePresignedUrlResponse) GetFileKey() string {
	if x != nil {
		return x.FileKey
	}
	return ""
}

func (x *GeneratePresignedUrlResponse) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *GeneratePresignedUrlResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GeneratePresignedUrlResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 确认上传请求
type ConfirmUploadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileKey       string                 `protobuf:"bytes,1,opt,name=file_key,json=fileKey,proto3" json:"file_key,omitempty"`
	Filename      string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	MimeType      string                 `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	FileSize      int64                  `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	UserId        int64                  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FileType      string                 `protobuf:"bytes,6,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmUploadRequest) Reset() {
	*x = ConfirmUploadRequest{}
	mi := &file_file_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmUploadRequest) ProtoMessage() {}

func (x *ConfirmUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmUploadRequest.ProtoReflect.Descriptor instead.
func (*ConfirmUploadRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{19}
}

func (x *ConfirmUploadRequest) GetFileKey() string {
	if x != nil {
		return x.FileKey
	}
	return ""
}

func (x *ConfirmUploadRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ConfirmUploadRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *ConfirmUploadRequest) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *ConfirmUploadRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ConfirmUploadRequest) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

// 确认上传响应
type ConfirmUploadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        int64                  `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FileUrl       string                 `protobuf:"bytes,2,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"`
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfirmUploadResponse) Reset() {
	*x = ConfirmUploadResponse{}
	mi := &file_file_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfirmUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmUploadResponse) ProtoMessage() {}

func (x *ConfirmUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmUploadResponse.ProtoReflect.Descriptor instead.
func (*ConfirmUploadResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{20}
}

func (x *ConfirmUploadResponse) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *ConfirmUploadResponse) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *ConfirmUploadResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConfirmUploadResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 图片压缩请求
type CompressImageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        int64                  `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Quality       int32                  `protobuf:"varint,2,opt,name=quality,proto3" json:"quality,omitempty"` // 压缩质量 1-100
	Width         int32                  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`     // 目标宽度，0表示不限制
	Height        int32                  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`   // 目标高度，0表示不限制
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompressImageRequest) Reset() {
	*x = CompressImageRequest{}
	mi := &file_file_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompressImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressImageRequest) ProtoMessage() {}

func (x *CompressImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressImageRequest.ProtoReflect.Descriptor instead.
func (*CompressImageRequest) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{21}
}

func (x *CompressImageRequest) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *CompressImageRequest) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *CompressImageRequest) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *CompressImageRequest) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// 图片压缩响应
type CompressImageResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CompressedFileId  int64                  `protobuf:"varint,1,opt,name=compressed_file_id,json=compressedFileId,proto3" json:"compressed_file_id,omitempty"`
	CompressedFileUrl string                 `protobuf:"bytes,2,opt,name=compressed_file_url,json=compressedFileUrl,proto3" json:"compressed_file_url,omitempty"`
	Success           bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Message           string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CompressImageResponse) Reset() {
	*x = CompressImageResponse{}
	mi := &file_file_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompressImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressImageResponse) ProtoMessage() {}

func (x *CompressImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressImageResponse.ProtoReflect.Descriptor instead.
func (*CompressImageResponse) Descriptor() ([]byte, []int) {
	return file_file_proto_rawDescGZIP(), []int{22}
}

func (x *CompressImageResponse) GetCompressedFileId() int64 {
	if x != nil {
		return x.CompressedFileId
	}
	return 0
}

func (x *CompressImageResponse) GetCompressedFileUrl() string {
	if x != nil {
		return x.CompressedFileUrl
	}
	return ""
}

func (x *CompressImageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CompressImageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_file_proto protoreflect.FileDescriptor

const file_file_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"file.proto\x12\x04file\"\xe9\x02\n" +
	"\bFileInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12#\n" +
	"\roriginal_name\x18\x03 \x01(\tR\foriginalName\x12\x1b\n" +
	"\tfile_path\x18\x04 \x01(\tR\bfilePath\x12\x19\n" +
	"\bfile_url\x18\x05 \x01(\tR\afileUrl\x12\x1b\n" +
	"\tfile_type\x18\x06 \x01(\tR\bfileType\x12\x1b\n" +
	"\tfile_size\x18\a \x01(\x03R\bfileSize\x12\x1b\n" +
	"\tmime_type\x18\b \x01(\tR\bmimeType\x12\x12\n" +
	"\x04hash\x18\t \x01(\tR\x04hash\x12\x17\n" +
	"\auser_id\x18\n" +
	" \x01(\x03R\x06userId\x12\x16\n" +
	"\x06status\x18\v \x01(\x05R\x06status\x12\x1b\n" +
	"\tcreate_at\x18\f \x01(\x03R\bcreateAt\x12\x1b\n" +
	"\tupdate_at\x18\r \x01(\x03R\bupdateAt\"\x9f\x01\n" +
	"\x11UploadFileRequest\x12\x1b\n" +
	"\tfile_data\x18\x01 \x01(\fR\bfileData\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x1b\n" +
	"\tmime_type\x18\x03 \x01(\tR\bmimeType\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\x03R\x06userId\x12\x1b\n" +
	"\tfile_type\x18\x05 \x01(\tR\bfileType\"|\n" +
	"\x12UploadFileResponse\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\x03R\x06fileId\x12\x19\n" +
	"\bfile_url\x18\x02 \x01(\tR\afileUrl\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\"\xb3\x01\n" +
	"\x11InitUploadRequest\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x1b\n" +
	"\tmime_type\x18\x03 \x01(\tR\bmimeType\x12\x1b\n" +
	"\tfile_size\x18\x04 \x01(\x03R\bfileSize\x12\x17\n" +
	"\auser_id\x18\x05 \x01(\x03R\x06userId\x12\x1b\n" +
	"\tfile_type\x18\x06 \x01(\tR\bfileType\x12\x12\n" +
	"\x04hash\x18\a \x01(\tR\x04hash\"\xa7\x01\n" +
	"\x12InitUploadResponse\x12\x1b\n" +
	"\tupload_id\x18\x01 \x01(\tR\buploadId\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x02 \x01(\x05R\tchunkSize\x12!\n" +
	"\ftotal_chunks\x18\x03 \x01(\x05R\vtotalChunks\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x05 \x01(\tR\amessage\"\x90\x01\n" +
	"\x12UploadChunkRequest\x12\x1b\n" +
	"\tupload_id\x18\x01 \x01(\tR\buploadId\x12\x1f\n" +
	"\vchunk_index\x18\x02 \x01(\x05R\n" +
	"chunkIndex\x12\x1d\n" +
	"\n" +
	"chunk_data\x18\x03 \x01(\fR\tchunkData\x12\x1d\n" +
	"\n" +
	"chunk_hash\x18\x04 \x01(\tR\tchunkHash\"I\n" +
	"\x13UploadChunkResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"M\n" +
	"\x15CompleteUploadRequest\x12\x1b\n" +
	"\tupload_id\x18\x01 \x01(\tR\buploadId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\x03R\x06userId\"\x80\x01\n" +
	"\x16CompleteUploadResponse\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\x03R\x06fileId\x12\x19\n" +
	"\bfile_url\x18\x02 \x01(\tR\afileUrl\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\"G\n" +
	"\x13DownloadFileRequest\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\x03R\x06fileId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\x03R\x06userId\"\xa0\x01\n" +
	"\x14DownloadFileResponse\x12\x1b\n" +
	"\tfile_data\x18\x01 \x01(\fR\bfileData\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x1b\n" +
	"\tmime_type\x18\x03 \x01(\tR\bmimeType\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x05 \x01(\tR\amessage\"F\n" +
	"\x12GetFileInfoRequest\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\x03R\x06fileId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\x03R\x06userId\"v\n" +
	"\x13GetFileInfoResponse\x12+\n" +
	"\tfile_info\x18\x01 \x01(\v2\x0e.file.FileInfoR\bfileInfo\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\"{\n" +
	"\x12GetFileListRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1b\n" +
	"\tfile_type\x18\x02 \x01(\tR\bfileType\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"Q\n" +
	"\x13GetFileListResponse\x12$\n" +
	"\x05files\x18\x01 \x03(\v2\x0e.file.FileInfoR\x05files\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\"E\n" +
	"\x11DeleteFileRequest\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\x03R\x06fileId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\x03R\x06userId\"H\n" +
	"\x12DeleteFileResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\x90\x01\n" +
	"\x1bGeneratePresignedUrlRequest\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x1b\n" +
	"\tmime_type\x18\x02 \x01(\tR\bmimeType\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\x03R\x06userId\x12\x1f\n" +
	"\vexpire_time\x18\x04 \x01(\x03R\n" +
	"expireTime\"\xad\x01\n" +
	"\x1cGeneratePresignedUrlResponse\x12\x1d\n" +
	"\n" +
	"upload_url\x18\x01 \x01(\tR\tuploadUrl\x12\x19\n" +
	"\bfile_key\x18\x02 \x01(\tR\afileKey\x12\x1f\n" +
	"\vexpire_time\x18\x03 \x01(\x03R\n" +
	"expireTime\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x05 \x01(\tR\amessage\"\xbd\x01\n" +
	"\x14ConfirmUploadRequest\x12\x19\n" +
	"\bfile_key\x18\x01 \x01(\tR\afileKey\x12\x1a\n" +
	"\bfilename\x18\x02 \x01(\tR\bfilename\x12\x1b\n" +
	"\tmime_type\x18\x03 \x01(\tR\bmimeType\x12\x1b\n" +
	"\tfile_size\x18\x04 \x01(\x03R\bfileSize\x12\x17\n" +
	"\auser_id\x18\x05 \x01(\x03R\x06userId\x12\x1b\n" +
	"\tfile_type\x18\x06 \x01(\tR\bfileType\"\x7f\n" +
	"\x15ConfirmUploadResponse\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\x03R\x06fileId\x12\x19\n" +
	"\bfile_url\x18\x02 \x01(\tR\afileUrl\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\"w\n" +
	"\x14CompressImageRequest\x12\x17\n" +
	"\afile_id\x18\x01 \x01(\x03R\x06fileId\x12\x18\n" +
	"\aquality\x18\x02 \x01(\x05R\aquality\x12\x14\n" +
	"\x05width\x18\x03 \x01(\x05R\x05width\x12\x16\n" +
	"\x06height\x18\x04 \x01(\x05R\x06height\"\xa9\x01\n" +
	"\x15CompressImageResponse\x12,\n" +
	"\x12compressed_file_id\x18\x01 \x01(\x03R\x10compressedFileId\x12.\n" +
	"\x13compressed_file_url\x18\x02 \x01(\tR\x11compressedFileUrl\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage2\xa3\x06\n" +
	"\vFileService\x12?\n" +
	"\n" +
	"UploadFile\x12\x17.file.UploadFileRequest\x1a\x18.file.UploadFileResponse\x12?\n" +
	"\n" +
	"InitUpload\x12\x17.file.InitUploadRequest\x1a\x18.file.InitUploadResponse\x12B\n" +
	"\vUploadChunk\x12\x18.file.UploadChunkRequest\x1a\x19.file.UploadChunkResponse\x12K\n" +
	"\x0eCompleteUpload\x12\x1b.file.CompleteUploadRequest\x1a\x1c.file.CompleteUploadResponse\x12E\n" +
	"\fDownloadFile\x12\x19.file.DownloadFileRequest\x1a\x1a.file.DownloadFileResponse\x12B\n" +
	"\vGetFileInfo\x12\x18.file.GetFileInfoRequest\x1a\x19.file.GetFileInfoResponse\x12B\n" +
	"\vGetFileList\x12\x18.file.GetFileListRequest\x1a\x19.file.GetFileListResponse\x12?\n" +
	"\n" +
	"DeleteFile\x12\x17.file.DeleteFileRequest\x1a\x18.file.DeleteFileResponse\x12]\n" +
	"\x14GeneratePresignedUrl\x12!.file.GeneratePresignedUrlRequest\x1a\".file.GeneratePresignedUrlResponse\x12H\n" +
	"\rConfirmUpload\x12\x1a.file.ConfirmUploadRequest\x1a\x1b.file.ConfirmUploadResponse\x12H\n" +
	"\rCompressImage\x12\x1a.file.CompressImageRequest\x1a\x1b.file.CompressImageResponseB\bZ\x06./fileb\x06proto3"

var (
	file_file_proto_rawDescOnce sync.Once
	file_file_proto_rawDescData []byte
)

func file_file_proto_rawDescGZIP() []byte {
	file_file_proto_rawDescOnce.Do(func() {
		file_file_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_file_proto_rawDesc), len(file_file_proto_rawDesc)))
	})
	return file_file_proto_rawDescData
}

var file_file_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_file_proto_goTypes = []any{
	(*FileInfo)(nil),                     // 0: file.FileInfo
	(*UploadFileRequest)(nil),            // 1: file.UploadFileRequest
	(*UploadFileResponse)(nil),           // 2: file.UploadFileResponse
	(*InitUploadRequest)(nil),            // 3: file.InitUploadRequest
	(*InitUploadResponse)(nil),           // 4: file.InitUploadResponse
	(*UploadChunkRequest)(nil),           // 5: file.UploadChunkRequest
	(*UploadChunkResponse)(nil),          // 6: file.UploadChunkResponse
	(*CompleteUploadRequest)(nil),        // 7: file.CompleteUploadRequest
	(*CompleteUploadResponse)(nil),       // 8: file.CompleteUploadResponse
	(*DownloadFileRequest)(nil),          // 9: file.DownloadFileRequest
	(*DownloadFileResponse)(nil),         // 10: file.DownloadFileResponse
	(*GetFileInfoRequest)(nil),           // 11: file.GetFileInfoRequest
	(*GetFileInfoResponse)(nil),          // 12: file.GetFileInfoResponse
	(*GetFileListRequest)(nil),           // 13: file.GetFileListRequest
	(*GetFileListResponse)(nil),          // 14: file.GetFileListResponse
	(*DeleteFileRequest)(nil),            // 15: file.DeleteFileRequest
	(*DeleteFileResponse)(nil),           // 16: file.DeleteFileResponse
	(*GeneratePresignedUrlRequest)(nil),  // 17: file.GeneratePresignedUrlRequest
	(*GeneratePresignedUrlResponse)(nil), // 18: file.GeneratePresignedUrlResponse
	(*ConfirmUploadRequest)(nil),         // 19: file.ConfirmUploadRequest
	(*ConfirmUploadResponse)(nil),        // 20: file.ConfirmUploadResponse
	(*CompressImageRequest)(nil),         // 21: file.CompressImageRequest
	(*CompressImageResponse)(nil),        // 22: file.CompressImageResponse
}
var file_file_proto_depIdxs = []int32{
	0,  // 0: file.GetFileInfoResponse.file_info:type_name -> file.FileInfo
	0,  // 1: file.GetFileListResponse.files:type_name -> file.FileInfo
	1,  // 2: file.FileService.UploadFile:input_type -> file.UploadFileRequest
	3,  // 3: file.FileService.InitUpload:input_type -> file.InitUploadRequest
	5,  // 4: file.FileService.UploadChunk:input_type -> file.UploadChunkRequest
	7,  // 5: file.FileService.CompleteUpload:input_type -> file.CompleteUploadRequest
	9,  // 6: file.FileService.DownloadFile:input_type -> file.DownloadFileRequest
	11, // 7: file.FileService.GetFileInfo:input_type -> file.GetFileInfoRequest
	13, // 8: file.FileService.GetFileList:input_type -> file.GetFileListRequest
	15, // 9: file.FileService.DeleteFile:input_type -> file.DeleteFileRequest
	17, // 10: file.FileService.GeneratePresignedUrl:input_type -> file.GeneratePresignedUrlRequest
	19, // 11: file.FileService.ConfirmUpload:input_type -> file.ConfirmUploadRequest
	21, // 12: file.FileService.CompressImage:input_type -> file.CompressImageRequest
	2,  // 13: file.FileService.UploadFile:output_type -> file.UploadFileResponse
	4,  // 14: file.FileService.InitUpload:output_type -> file.InitUploadResponse
	6,  // 15: file.FileService.UploadChunk:output_type -> file.UploadChunkResponse
	8,  // 16: file.FileService.CompleteUpload:output_type -> file.CompleteUploadResponse
	10, // 17: file.FileService.DownloadFile:output_type -> file.DownloadFileResponse
	12, // 18: file.FileService.GetFileInfo:output_type -> file.GetFileInfoResponse
	14, // 19: file.FileService.GetFileList:output_type -> file.GetFileListResponse
	16, // 20: file.FileService.DeleteFile:output_type -> file.DeleteFileResponse
	18, // 21: file.FileService.GeneratePresignedUrl:output_type -> file.GeneratePresignedUrlResponse
	20, // 22: file.FileService.ConfirmUpload:output_type -> file.ConfirmUploadResponse
	22, // 23: file.FileService.CompressImage:output_type -> file.CompressImageResponse
	13, // [13:24] is the sub-list for method output_type
	2,  // [2:13] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_file_proto_init() }
func file_file_proto_init() {
	if File_file_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_file_proto_rawDesc), len(file_file_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_file_proto_goTypes,
		DependencyIndexes: file_file_proto_depIdxs,
		MessageInfos:      file_file_proto_msgTypes,
	}.Build()
	File_file_proto = out.File
	file_file_proto_goTypes = nil
	file_file_proto_depIdxs = nil
}

// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: file.proto

package server

import (
	"context"

	"IM/rpc/file/file"
	"IM/rpc/file/internal/logic"
	"IM/rpc/file/internal/svc"
)

type FileServiceServer struct {
	svcCtx *svc.ServiceContext
	file.UnimplementedFileServiceServer
}

func NewFileServiceServer(svcCtx *svc.ServiceContext) *FileServiceServer {
	return &FileServiceServer{
		svcCtx: svcCtx,
	}
}

// 服务端直接上传文件
func (s *FileServiceServer) UploadFile(ctx context.Context, in *file.UploadFileRequest) (*file.UploadFileResponse, error) {
	l := logic.NewUploadFileLogic(ctx, s.svcCtx)
	return l.UploadFile(in)
}

// 下载文件
func (s *FileServiceServer) DownloadFile(ctx context.Context, in *file.DownloadFileRequest) (*file.DownloadFileResponse, error) {
	l := logic.NewDownloadFileLogic(ctx, s.svcCtx)
	return l.DownloadFile(in)
}

// 获取文件信息
func (s *FileServiceServer) GetFileInfo(ctx context.Context, in *file.GetFileInfoRequest) (*file.GetFileInfoResponse, error) {
	l := logic.NewGetFileInfoLogic(ctx, s.svcCtx)
	return l.GetFileInfo(in)
}

// 获取文件列表
func (s *FileServiceServer) GetFileList(ctx context.Context, in *file.GetFileListRequest) (*file.GetFileListResponse, error) {
	l := logic.NewGetFileListLogic(ctx, s.svcCtx)
	return l.GetFileList(in)
}

// 删除文件
func (s *FileServiceServer) DeleteFile(ctx context.Context, in *file.DeleteFileRequest) (*file.DeleteFileResponse, error) {
	l := logic.NewDeleteFileLogic(ctx, s.svcCtx)
	return l.DeleteFile(in)
}

// 生成预签名上传URL
func (s *FileServiceServer) GeneratePresignedUrl(ctx context.Context, in *file.GeneratePresignedUrlRequest) (*file.GeneratePresignedUrlResponse, error) {
	l := logic.NewGeneratePresignedUrlLogic(ctx, s.svcCtx)
	return l.GeneratePresignedUrl(in)
}

// 确认上传 (配合预签名URL使用)
func (s *FileServiceServer) ConfirmUpload(ctx context.Context, in *file.ConfirmUploadRequest) (*file.ConfirmUploadResponse, error) {
	l := logic.NewConfirmUploadLogic(ctx, s.svcCtx)
	return l.ConfirmUpload(in)
}

// 图片压缩
func (s *FileServiceServer) CompressImage(ctx context.Context, in *file.CompressImageRequest) (*file.CompressImageResponse, error) {
	l := logic.NewCompressImageLogic(ctx, s.svcCtx)
	return l.CompressImage(in)
}

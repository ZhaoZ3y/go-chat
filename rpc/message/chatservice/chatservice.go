// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: message.proto

package chatservice

import (
	"context"

	"IM/rpc/message/chat"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ConnectRequest              = chat.ConnectRequest
	Conversation                = chat.Conversation
	DeleteConversationRequest   = chat.DeleteConversationRequest
	DeleteConversationResponse  = chat.DeleteConversationResponse
	DeleteMessageRequest        = chat.DeleteMessageRequest
	DeleteMessageResponse       = chat.DeleteMessageResponse
	GetConversationListRequest  = chat.GetConversationListRequest
	GetConversationListResponse = chat.GetConversationListResponse
	GetMessageHistoryRequest    = chat.GetMessageHistoryRequest
	GetMessageHistoryResponse   = chat.GetMessageHistoryResponse
	MarkMessageReadRequest      = chat.MarkMessageReadRequest
	MarkMessageReadResponse     = chat.MarkMessageReadResponse
	Message                     = chat.Message
	PushMessage                 = chat.PushMessage
	RecallMessageRequest        = chat.RecallMessageRequest
	RecallMessageResponse       = chat.RecallMessageResponse
	SendMessageRequest          = chat.SendMessageRequest
	SendMessageResponse         = chat.SendMessageResponse

	ChatService interface {
		// 发送消息
		SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
		// 获取消息历史
		GetMessageHistory(ctx context.Context, in *GetMessageHistoryRequest, opts ...grpc.CallOption) (*GetMessageHistoryResponse, error)
		// 获取会话列表
		GetConversationList(ctx context.Context, in *GetConversationListRequest, opts ...grpc.CallOption) (*GetConversationListResponse, error)
		// 删除会话
		DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationResponse, error)
		// 标记消息已读
		MarkMessageRead(ctx context.Context, in *MarkMessageReadRequest, opts ...grpc.CallOption) (*MarkMessageReadResponse, error)
		// 删除消息
		DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
		// 撤回消息
		RecallMessage(ctx context.Context, in *RecallMessageRequest, opts ...grpc.CallOption) (*RecallMessageResponse, error)
	}

	defaultChatService struct {
		cli zrpc.Client
	}
)

func NewChatService(cli zrpc.Client) ChatService {
	return &defaultChatService{
		cli: cli,
	}
}

// 发送消息
func (m *defaultChatService) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	client := chat.NewChatServiceClient(m.cli.Conn())
	return client.SendMessage(ctx, in, opts...)
}

// 获取消息历史
func (m *defaultChatService) GetMessageHistory(ctx context.Context, in *GetMessageHistoryRequest, opts ...grpc.CallOption) (*GetMessageHistoryResponse, error) {
	client := chat.NewChatServiceClient(m.cli.Conn())
	return client.GetMessageHistory(ctx, in, opts...)
}

// 获取会话列表
func (m *defaultChatService) GetConversationList(ctx context.Context, in *GetConversationListRequest, opts ...grpc.CallOption) (*GetConversationListResponse, error) {
	client := chat.NewChatServiceClient(m.cli.Conn())
	return client.GetConversationList(ctx, in, opts...)
}

// 删除会话
func (m *defaultChatService) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationResponse, error) {
	client := chat.NewChatServiceClient(m.cli.Conn())
	return client.DeleteConversation(ctx, in, opts...)
}

// 标记消息已读
func (m *defaultChatService) MarkMessageRead(ctx context.Context, in *MarkMessageReadRequest, opts ...grpc.CallOption) (*MarkMessageReadResponse, error) {
	client := chat.NewChatServiceClient(m.cli.Conn())
	return client.MarkMessageRead(ctx, in, opts...)
}

// 删除消息
func (m *defaultChatService) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	client := chat.NewChatServiceClient(m.cli.Conn())
	return client.DeleteMessage(ctx, in, opts...)
}

// 撤回消息
func (m *defaultChatService) RecallMessage(ctx context.Context, in *RecallMessageRequest, opts ...grpc.CallOption) (*RecallMessageResponse, error) {
	client := chat.NewChatServiceClient(m.cli.Conn())
	return client.RecallMessage(ctx, in, opts...)
}

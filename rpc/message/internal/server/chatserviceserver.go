// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: message.proto

package server

import (
	"context"

	"IM/rpc/message/chat"
	"IM/rpc/message/internal/logic"
	"IM/rpc/message/internal/svc"
)

type ChatServiceServer struct {
	svcCtx *svc.ServiceContext
	chat.UnimplementedChatServiceServer
}

func NewChatServiceServer(svcCtx *svc.ServiceContext) *ChatServiceServer {
	return &ChatServiceServer{
		svcCtx: svcCtx,
	}
}

// 发送消息
func (s *ChatServiceServer) SendMessage(ctx context.Context, in *chat.SendMessageRequest) (*chat.SendMessageResponse, error) {
	l := logic.NewSendMessageLogic(ctx, s.svcCtx)
	return l.SendMessage(in)
}

// 获取消息历史
func (s *ChatServiceServer) GetMessageHistory(ctx context.Context, in *chat.GetMessageHistoryRequest) (*chat.GetMessageHistoryResponse, error) {
	l := logic.NewGetMessageHistoryLogic(ctx, s.svcCtx)
	return l.GetMessageHistory(in)
}

// 获取会话列表
func (s *ChatServiceServer) GetConversationList(ctx context.Context, in *chat.GetConversationListRequest) (*chat.GetConversationListResponse, error) {
	l := logic.NewGetConversationListLogic(ctx, s.svcCtx)
	return l.GetConversationList(in)
}

// 标记消息已读
func (s *ChatServiceServer) MarkMessageRead(ctx context.Context, in *chat.MarkMessageReadRequest) (*chat.MarkMessageReadResponse, error) {
	l := logic.NewMarkMessageReadLogic(ctx, s.svcCtx)
	return l.MarkMessageRead(in)
}

// 删除消息
func (s *ChatServiceServer) DeleteMessage(ctx context.Context, in *chat.DeleteMessageRequest) (*chat.DeleteMessageResponse, error) {
	l := logic.NewDeleteMessageLogic(ctx, s.svcCtx)
	return l.DeleteMessage(in)
}

// 撤回消息
func (s *ChatServiceServer) RecallMessage(ctx context.Context, in *chat.RecallMessageRequest) (*chat.RecallMessageResponse, error) {
	l := logic.NewRecallMessageLogic(ctx, s.svcCtx)
	return l.RecallMessage(in)
}

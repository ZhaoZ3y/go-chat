// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: notify.proto

package server

import (
	"context"

	"IM/rpc/notify/internal/logic"
	"IM/rpc/notify/internal/svc"
	"IM/rpc/notify/notification"
)

type NotificationServiceServer struct {
	svcCtx *svc.ServiceContext
	notification.UnimplementedNotificationServiceServer
}

func NewNotificationServiceServer(svcCtx *svc.ServiceContext) *NotificationServiceServer {
	return &NotificationServiceServer{
		svcCtx: svcCtx,
	}
}

// 发送通知接口，将通知消息推送到 Kafka 等消息队列
func (s *NotificationServiceServer) SendNotification(ctx context.Context, in *notification.SendNotificationRequest) (*notification.SendNotificationResponse, error) {
	l := logic.NewSendNotificationLogic(ctx, s.svcCtx)
	return l.SendNotification(in)
}

// 消费通知接口，消费端实现消息接收处理（可选）
func (s *NotificationServiceServer) ConsumeNotification(ctx context.Context, in *notification.ConsumeNotificationRequest) (*notification.ConsumeNotificationResponse, error) {
	l := logic.NewConsumeNotificationLogic(ctx, s.svcCtx)
	return l.ConsumeNotification(in)
}

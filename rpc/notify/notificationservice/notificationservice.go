// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: notify.proto

package notificationservice

import (
	"context"

	"IM/rpc/notify/notification"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ConsumeNotificationRequest  = notification.ConsumeNotificationRequest
	ConsumeNotificationResponse = notification.ConsumeNotificationResponse
	NotificationMessage         = notification.NotificationMessage
	SendNotificationRequest     = notification.SendNotificationRequest
	SendNotificationResponse    = notification.SendNotificationResponse

	NotificationService interface {
		// 发送通知接口，将通知消息推送到 Kafka 等消息队列
		SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error)
		// 消费通知接口，消费端实现消息接收处理（可选）
		ConsumeNotification(ctx context.Context, in *ConsumeNotificationRequest, opts ...grpc.CallOption) (*ConsumeNotificationResponse, error)
	}

	defaultNotificationService struct {
		cli zrpc.Client
	}
)

func NewNotificationService(cli zrpc.Client) NotificationService {
	return &defaultNotificationService{
		cli: cli,
	}
}

// 发送通知接口，将通知消息推送到 Kafka 等消息队列
func (m *defaultNotificationService) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error) {
	client := notification.NewNotificationServiceClient(m.cli.Conn())
	return client.SendNotification(ctx, in, opts...)
}

// 消费通知接口，消费端实现消息接收处理（可选）
func (m *defaultNotificationService) ConsumeNotification(ctx context.Context, in *ConsumeNotificationRequest, opts ...grpc.CallOption) (*ConsumeNotificationResponse, error) {
	client := notification.NewNotificationServiceClient(m.cli.Conn())
	return client.ConsumeNotification(ctx, in, opts...)
}

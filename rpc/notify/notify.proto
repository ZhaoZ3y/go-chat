syntax = "proto3";

package notification;

option go_package = "./notification";

// 通知类型，涵盖好友申请和多种群聊相关通知
enum NotificationType {
  UNKNOWN = 0;                  // 未知类型，默认值
  FRIEND_REQUEST = 1;           // 好友申请通知
  GROUP_JOIN_REQUEST = 2;       // 用户申请加入群聊
  GROUP_JOINED_BROADCAST = 3;   // 群内广播某用户加入群聊
  GROUP_INVITE_JOIN_REQUEST = 4; // 群聊邀请入群申请
  GROUP_HANDLE_JOIN_REQUEST = 5; // 群聊处理入群申请结果
  GROUP_BEINVITED_JOINED_REQUEST = 6; // 被邀请加入群聊通知
  GROUP_MEMBER_KICKED = 7;      // 群成员被踢出通知
  GROUP_MEMBER_QUIT = 8;        // 群成员主动退出通知
  GROUP_TRANSFERRED = 9;        // 群聊转让通知
  GROUP_ADMIN_HANDLE = 10;       // 群管理员处理通知
  GROUP_DISMISSED = 11;         // 群聊被解散通知
}

// 通知消息结构体
message NotificationMessage {
  int64 user_id = 1;            // 接收通知的用户ID，单点接收
  string topic = 2;             // Kafka主题名称，建议固定业务枚举映射
  string content = 3;           // 通知内容，简短描述信息

  int64 timestamp = 4;  // 事件时间点，标准时间类型

  NotificationType type = 5;    // 通知类型，区分业务含义

  // 群聊相关字段，仅针对群聊通知有效
  int64 group_id = 6;           // 群聊ID
  int64 operator_user_id = 7;   // 操作者ID，如发起申请、审核者等

  string extra = 8;             // 扩展字段，JSON格式字符串，便于灵活传输复杂信息
}

// 发送通知请求
message SendNotificationRequest {
  NotificationMessage notification = 1;
}

// 发送通知响应
message SendNotificationResponse {
  bool success = 1;
  string error_msg = 2;
}

// 消费通知请求（示范用，一般由消费端实现处理）
message ConsumeNotificationRequest {
  NotificationMessage notification = 1;
}

// 消费通知响应
message ConsumeNotificationResponse {
  bool success = 1;
  string error_msg = 2;
}

// 通知服务接口，包含发送和消费示范
service NotificationService {
  // 发送通知接口，将通知消息推送到 Kafka 等消息队列
  rpc SendNotification(SendNotificationRequest) returns (SendNotificationResponse);

  // 消费通知接口，消费端实现消息接收处理（可选）
  rpc ConsumeNotification(ConsumeNotificationRequest) returns (ConsumeNotificationResponse);
}

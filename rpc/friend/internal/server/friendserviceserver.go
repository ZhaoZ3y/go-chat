// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: friend.proto

package server

import (
	"context"

	"IM/rpc/friend/friend"
	"IM/rpc/friend/internal/logic"
	"IM/rpc/friend/internal/svc"
)

type FriendServiceServer struct {
	svcCtx *svc.ServiceContext
	friend.UnimplementedFriendServiceServer
}

func NewFriendServiceServer(svcCtx *svc.ServiceContext) *FriendServiceServer {
	return &FriendServiceServer{
		svcCtx: svcCtx,
	}
}

// 发送好友申请
func (s *FriendServiceServer) SendFriendRequest(ctx context.Context, in *friend.SendFriendRequestRequest) (*friend.SendFriendRequestResponse, error) {
	l := logic.NewSendFriendRequestLogic(ctx, s.svcCtx)
	return l.SendFriendRequest(in)
}

// 处理好友申请
func (s *FriendServiceServer) HandleFriendRequest(ctx context.Context, in *friend.HandleFriendRequestRequest) (*friend.HandleFriendRequestResponse, error) {
	l := logic.NewHandleFriendRequestLogic(ctx, s.svcCtx)
	return l.HandleFriendRequest(in)
}

// 获取未读好友申请数量
func (s *FriendServiceServer) GetUnreadFriendRequestCount(ctx context.Context, in *friend.GetUnreadFriendRequestCountRequest) (*friend.GetUnreadFriendRequestCountResponse, error) {
	l := logic.NewGetUnreadFriendRequestCountLogic(ctx, s.svcCtx)
	return l.GetUnreadFriendRequestCount(in)
}

// 获取好友申请列表
func (s *FriendServiceServer) GetFriendRequestList(ctx context.Context, in *friend.GetFriendRequestListRequest) (*friend.GetFriendRequestListResponse, error) {
	l := logic.NewGetFriendRequestListLogic(ctx, s.svcCtx)
	return l.GetFriendRequestList(in)
}

// 获取好友列表
func (s *FriendServiceServer) GetFriendList(ctx context.Context, in *friend.GetFriendListRequest) (*friend.GetFriendListResponse, error) {
	l := logic.NewGetFriendListLogic(ctx, s.svcCtx)
	return l.GetFriendList(in)
}

// 删除好友
func (s *FriendServiceServer) DeleteFriend(ctx context.Context, in *friend.DeleteFriendRequest) (*friend.DeleteFriendResponse, error) {
	l := logic.NewDeleteFriendLogic(ctx, s.svcCtx)
	return l.DeleteFriend(in)
}

// 更新好友备注
func (s *FriendServiceServer) UpdateFriendRemark(ctx context.Context, in *friend.UpdateFriendRemarkRequest) (*friend.UpdateFriendRemarkResponse, error) {
	l := logic.NewUpdateFriendRemarkLogic(ctx, s.svcCtx)
	return l.UpdateFriendRemark(in)
}

// 拉黑好友
func (s *FriendServiceServer) BlockFriend(ctx context.Context, in *friend.BlockFriendRequest) (*friend.BlockFriendResponse, error) {
	l := logic.NewBlockFriendLogic(ctx, s.svcCtx)
	return l.BlockFriend(in)
}

// 获取拉黑列表
func (s *FriendServiceServer) GetBlockedList(ctx context.Context, in *friend.GetBlockedListRequest) (*friend.GetBlockedListResponse, error) {
	l := logic.NewGetBlockedListLogic(ctx, s.svcCtx)
	return l.GetBlockedList(in)
}

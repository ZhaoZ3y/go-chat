// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.4
// source: friend.proto

package friend

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 好友信息
type Friend struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FriendId      int64                  `protobuf:"varint,3,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
	Remark        string                 `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty"`  // 备注名
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"` // 1:正常 2:拉黑
	CreateAt      int64                  `protobuf:"varint,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	UpdateAt      int64                  `protobuf:"varint,7,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Friend) Reset() {
	*x = Friend{}
	mi := &file_friend_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Friend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Friend) ProtoMessage() {}

func (x *Friend) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Friend.ProtoReflect.Descriptor instead.
func (*Friend) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{0}
}

func (x *Friend) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Friend) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Friend) GetFriendId() int64 {
	if x != nil {
		return x.FriendId
	}
	return 0
}

func (x *Friend) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Friend) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Friend) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *Friend) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

// 好友申请
type FriendRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FromUserId    int64                  `protobuf:"varint,2,opt,name=from_user_id,json=fromUserId,proto3" json:"from_user_id,omitempty"`
	ToUserId      int64                  `protobuf:"varint,3,opt,name=to_user_id,json=toUserId,proto3" json:"to_user_id,omitempty"`
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"` // 申请消息
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`  // 1:待处理 2:已同意 3:已拒绝
	CreateAt      int64                  `protobuf:"varint,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	UpdateAt      int64                  `protobuf:"varint,7,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FriendRequest) Reset() {
	*x = FriendRequest{}
	mi := &file_friend_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendRequest) ProtoMessage() {}

func (x *FriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendRequest.ProtoReflect.Descriptor instead.
func (*FriendRequest) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{1}
}

func (x *FriendRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FriendRequest) GetFromUserId() int64 {
	if x != nil {
		return x.FromUserId
	}
	return 0
}

func (x *FriendRequest) GetToUserId() int64 {
	if x != nil {
		return x.ToUserId
	}
	return 0
}

func (x *FriendRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FriendRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FriendRequest) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *FriendRequest) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

// 发送好友申请请求
type SendFriendRequestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FromUserId    int64                  `protobuf:"varint,1,opt,name=from_user_id,json=fromUserId,proto3" json:"from_user_id,omitempty"`
	ToUserId      int64                  `protobuf:"varint,2,opt,name=to_user_id,json=toUserId,proto3" json:"to_user_id,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendFriendRequestRequest) Reset() {
	*x = SendFriendRequestRequest{}
	mi := &file_friend_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendFriendRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFriendRequestRequest) ProtoMessage() {}

func (x *SendFriendRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFriendRequestRequest.ProtoReflect.Descriptor instead.
func (*SendFriendRequestRequest) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{2}
}

func (x *SendFriendRequestRequest) GetFromUserId() int64 {
	if x != nil {
		return x.FromUserId
	}
	return 0
}

func (x *SendFriendRequestRequest) GetToUserId() int64 {
	if x != nil {
		return x.ToUserId
	}
	return 0
}

func (x *SendFriendRequestRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 发送好友申请响应
type SendFriendRequestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestId     int64                  `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendFriendRequestResponse) Reset() {
	*x = SendFriendRequestResponse{}
	mi := &file_friend_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendFriendRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFriendRequestResponse) ProtoMessage() {}

func (x *SendFriendRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFriendRequestResponse.ProtoReflect.Descriptor instead.
func (*SendFriendRequestResponse) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{3}
}

func (x *SendFriendRequestResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SendFriendRequestResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SendFriendRequestResponse) GetRequestId() int64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

// 处理好友申请请求
type HandleFriendRequestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestId     int64                  `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	UserId        int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Action        int32                  `protobuf:"varint,3,opt,name=action,proto3" json:"action,omitempty"`  // 2:同意 3:拒绝
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"` // 备注
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandleFriendRequestRequest) Reset() {
	*x = HandleFriendRequestRequest{}
	mi := &file_friend_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandleFriendRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleFriendRequestRequest) ProtoMessage() {}

func (x *HandleFriendRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleFriendRequestRequest.ProtoReflect.Descriptor instead.
func (*HandleFriendRequestRequest) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{4}
}

func (x *HandleFriendRequestRequest) GetRequestId() int64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *HandleFriendRequestRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *HandleFriendRequestRequest) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *HandleFriendRequestRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 处理好友申请响应
type HandleFriendRequestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RequestInfo   *FriendRequest         `protobuf:"bytes,3,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"` // 处理后的好友申请信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandleFriendRequestResponse) Reset() {
	*x = HandleFriendRequestResponse{}
	mi := &file_friend_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandleFriendRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleFriendRequestResponse) ProtoMessage() {}

func (x *HandleFriendRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleFriendRequestResponse.ProtoReflect.Descriptor instead.
func (*HandleFriendRequestResponse) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{5}
}

func (x *HandleFriendRequestResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *HandleFriendRequestResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HandleFriendRequestResponse) GetRequestInfo() *FriendRequest {
	if x != nil {
		return x.RequestInfo
	}
	return nil
}

// 获取好友申请列表请求
type GetFriendRequestListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Status        int32                  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"` // 0:全部 1:待处理 2:已同意 3:已拒绝
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFriendRequestListRequest) Reset() {
	*x = GetFriendRequestListRequest{}
	mi := &file_friend_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFriendRequestListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendRequestListRequest) ProtoMessage() {}

func (x *GetFriendRequestListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendRequestListRequest.ProtoReflect.Descriptor instead.
func (*GetFriendRequestListRequest) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{6}
}

func (x *GetFriendRequestListRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetFriendRequestListRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 获取好友申请列表响应
type GetFriendRequestListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Requests      []*FriendRequest       `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFriendRequestListResponse) Reset() {
	*x = GetFriendRequestListResponse{}
	mi := &file_friend_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFriendRequestListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendRequestListResponse) ProtoMessage() {}

func (x *GetFriendRequestListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendRequestListResponse.ProtoReflect.Descriptor instead.
func (*GetFriendRequestListResponse) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{7}
}

func (x *GetFriendRequestListResponse) GetRequests() []*FriendRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *GetFriendRequestListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 获取好友列表请求
type GetFriendListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFriendListRequest) Reset() {
	*x = GetFriendListRequest{}
	mi := &file_friend_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFriendListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendListRequest) ProtoMessage() {}

func (x *GetFriendListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendListRequest.ProtoReflect.Descriptor instead.
func (*GetFriendListRequest) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{8}
}

func (x *GetFriendListRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 获取好友列表响应
type GetFriendListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Friends       []*Friend              `protobuf:"bytes,1,rep,name=friends,proto3" json:"friends,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFriendListResponse) Reset() {
	*x = GetFriendListResponse{}
	mi := &file_friend_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFriendListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFriendListResponse) ProtoMessage() {}

func (x *GetFriendListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFriendListResponse.ProtoReflect.Descriptor instead.
func (*GetFriendListResponse) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{9}
}

func (x *GetFriendListResponse) GetFriends() []*Friend {
	if x != nil {
		return x.Friends
	}
	return nil
}

func (x *GetFriendListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 删除好友请求
type DeleteFriendRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FriendId      int64                  `protobuf:"varint,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFriendRequest) Reset() {
	*x = DeleteFriendRequest{}
	mi := &file_friend_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFriendRequest) ProtoMessage() {}

func (x *DeleteFriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFriendRequest.ProtoReflect.Descriptor instead.
func (*DeleteFriendRequest) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteFriendRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *DeleteFriendRequest) GetFriendId() int64 {
	if x != nil {
		return x.FriendId
	}
	return 0
}

// 删除好友响应
type DeleteFriendResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFriendResponse) Reset() {
	*x = DeleteFriendResponse{}
	mi := &file_friend_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFriendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFriendResponse) ProtoMessage() {}

func (x *DeleteFriendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFriendResponse.ProtoReflect.Descriptor instead.
func (*DeleteFriendResponse) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteFriendResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteFriendResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 更新好友备注请求
type UpdateFriendRemarkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FriendId      int64                  `protobuf:"varint,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
	Remark        string                 `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFriendRemarkRequest) Reset() {
	*x = UpdateFriendRemarkRequest{}
	mi := &file_friend_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFriendRemarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFriendRemarkRequest) ProtoMessage() {}

func (x *UpdateFriendRemarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFriendRemarkRequest.ProtoReflect.Descriptor instead.
func (*UpdateFriendRemarkRequest) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateFriendRemarkRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateFriendRemarkRequest) GetFriendId() int64 {
	if x != nil {
		return x.FriendId
	}
	return 0
}

func (x *UpdateFriendRemarkRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// 更新好友备注响应
type UpdateFriendRemarkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFriendRemarkResponse) Reset() {
	*x = UpdateFriendRemarkResponse{}
	mi := &file_friend_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFriendRemarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFriendRemarkResponse) ProtoMessage() {}

func (x *UpdateFriendRemarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFriendRemarkResponse.ProtoReflect.Descriptor instead.
func (*UpdateFriendRemarkResponse) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateFriendRemarkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateFriendRemarkResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 拉黑好友请求
type BlockFriendRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FriendId      int64                  `protobuf:"varint,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
	Status        int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"` // 更新状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockFriendRequest) Reset() {
	*x = BlockFriendRequest{}
	mi := &file_friend_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockFriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockFriendRequest) ProtoMessage() {}

func (x *BlockFriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockFriendRequest.ProtoReflect.Descriptor instead.
func (*BlockFriendRequest) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{14}
}

func (x *BlockFriendRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *BlockFriendRequest) GetFriendId() int64 {
	if x != nil {
		return x.FriendId
	}
	return 0
}

func (x *BlockFriendRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 拉黑好友响应
type BlockFriendResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockFriendResponse) Reset() {
	*x = BlockFriendResponse{}
	mi := &file_friend_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockFriendResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockFriendResponse) ProtoMessage() {}

func (x *BlockFriendResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockFriendResponse.ProtoReflect.Descriptor instead.
func (*BlockFriendResponse) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{15}
}

func (x *BlockFriendResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BlockFriendResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetBlockedListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockedListRequest) Reset() {
	*x = GetBlockedListRequest{}
	mi := &file_friend_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockedListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockedListRequest) ProtoMessage() {}

func (x *GetBlockedListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockedListRequest.ProtoReflect.Descriptor instead.
func (*GetBlockedListRequest) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{16}
}

func (x *GetBlockedListRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetBlockedListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Friends       []*Friend              `protobuf:"bytes,1,rep,name=friends,proto3" json:"friends,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlockedListResponse) Reset() {
	*x = GetBlockedListResponse{}
	mi := &file_friend_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlockedListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockedListResponse) ProtoMessage() {}

func (x *GetBlockedListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockedListResponse.ProtoReflect.Descriptor instead.
func (*GetBlockedListResponse) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{17}
}

func (x *GetBlockedListResponse) GetFriends() []*Friend {
	if x != nil {
		return x.Friends
	}
	return nil
}

func (x *GetBlockedListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 获取未读好友申请数量请求
type GetUnreadFriendRequestCountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUnreadFriendRequestCountRequest) Reset() {
	*x = GetUnreadFriendRequestCountRequest{}
	mi := &file_friend_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUnreadFriendRequestCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnreadFriendRequestCountRequest) ProtoMessage() {}

func (x *GetUnreadFriendRequestCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnreadFriendRequestCountRequest.ProtoReflect.Descriptor instead.
func (*GetUnreadFriendRequestCountRequest) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{18}
}

func (x *GetUnreadFriendRequestCountRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 获取未读好友申请数量响应
type GetUnreadFriendRequestCountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUnreadFriendRequestCountResponse) Reset() {
	*x = GetUnreadFriendRequestCountResponse{}
	mi := &file_friend_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUnreadFriendRequestCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnreadFriendRequestCountResponse) ProtoMessage() {}

func (x *GetUnreadFriendRequestCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friend_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnreadFriendRequestCountResponse.ProtoReflect.Descriptor instead.
func (*GetUnreadFriendRequestCountResponse) Descriptor() ([]byte, []int) {
	return file_friend_proto_rawDescGZIP(), []int{19}
}

func (x *GetUnreadFriendRequestCountResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_friend_proto protoreflect.FileDescriptor

const file_friend_proto_rawDesc = "" +
	"\n" +
	"\ffriend.proto\x12\x06friend\"\xb8\x01\n" +
	"\x06Friend\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\x03R\x06userId\x12\x1b\n" +
	"\tfriend_id\x18\x03 \x01(\x03R\bfriendId\x12\x16\n" +
	"\x06remark\x18\x04 \x01(\tR\x06remark\x12\x16\n" +
	"\x06status\x18\x05 \x01(\x05R\x06status\x12\x1b\n" +
	"\tcreate_at\x18\x06 \x01(\x03R\bcreateAt\x12\x1b\n" +
	"\tupdate_at\x18\a \x01(\x03R\bupdateAt\"\xcb\x01\n" +
	"\rFriendRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12 \n" +
	"\ffrom_user_id\x18\x02 \x01(\x03R\n" +
	"fromUserId\x12\x1c\n" +
	"\n" +
	"to_user_id\x18\x03 \x01(\x03R\btoUserId\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\x12\x16\n" +
	"\x06status\x18\x05 \x01(\x05R\x06status\x12\x1b\n" +
	"\tcreate_at\x18\x06 \x01(\x03R\bcreateAt\x12\x1b\n" +
	"\tupdate_at\x18\a \x01(\x03R\bupdateAt\"t\n" +
	"\x18SendFriendRequestRequest\x12 \n" +
	"\ffrom_user_id\x18\x01 \x01(\x03R\n" +
	"fromUserId\x12\x1c\n" +
	"\n" +
	"to_user_id\x18\x02 \x01(\x03R\btoUserId\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\"n\n" +
	"\x19SendFriendRequestResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"request_id\x18\x03 \x01(\x03R\trequestId\"\x86\x01\n" +
	"\x1aHandleFriendRequestRequest\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\x03R\trequestId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\x03R\x06userId\x12\x16\n" +
	"\x06action\x18\x03 \x01(\x05R\x06action\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\"\x8b\x01\n" +
	"\x1bHandleFriendRequestResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x128\n" +
	"\frequest_info\x18\x03 \x01(\v2\x15.friend.FriendRequestR\vrequestInfo\"N\n" +
	"\x1bGetFriendRequestListRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\x05R\x06status\"g\n" +
	"\x1cGetFriendRequestListResponse\x121\n" +
	"\brequests\x18\x01 \x03(\v2\x15.friend.FriendRequestR\brequests\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\"/\n" +
	"\x14GetFriendListRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\"W\n" +
	"\x15GetFriendListResponse\x12(\n" +
	"\afriends\x18\x01 \x03(\v2\x0e.friend.FriendR\afriends\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\"K\n" +
	"\x13DeleteFriendRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1b\n" +
	"\tfriend_id\x18\x02 \x01(\x03R\bfriendId\"J\n" +
	"\x14DeleteFriendResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"i\n" +
	"\x19UpdateFriendRemarkRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1b\n" +
	"\tfriend_id\x18\x02 \x01(\x03R\bfriendId\x12\x16\n" +
	"\x06remark\x18\x03 \x01(\tR\x06remark\"P\n" +
	"\x1aUpdateFriendRemarkResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"b\n" +
	"\x12BlockFriendRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x1b\n" +
	"\tfriend_id\x18\x02 \x01(\x03R\bfriendId\x12\x16\n" +
	"\x06status\x18\x03 \x01(\x05R\x06status\"I\n" +
	"\x13BlockFriendResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"0\n" +
	"\x15GetBlockedListRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\"X\n" +
	"\x16GetBlockedListResponse\x12(\n" +
	"\afriends\x18\x01 \x03(\v2\x0e.friend.FriendR\afriends\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\"=\n" +
	"\"GetUnreadFriendRequestCountRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\";\n" +
	"#GetUnreadFriendRequestCountResponse\x12\x14\n" +
	"\x05count\x18\x01 \x01(\x05R\x05count2\xb3\x06\n" +
	"\rFriendService\x12X\n" +
	"\x11SendFriendRequest\x12 .friend.SendFriendRequestRequest\x1a!.friend.SendFriendRequestResponse\x12^\n" +
	"\x13HandleFriendRequest\x12\".friend.HandleFriendRequestRequest\x1a#.friend.HandleFriendRequestResponse\x12v\n" +
	"\x1bGetUnreadFriendRequestCount\x12*.friend.GetUnreadFriendRequestCountRequest\x1a+.friend.GetUnreadFriendRequestCountResponse\x12a\n" +
	"\x14GetFriendRequestList\x12#.friend.GetFriendRequestListRequest\x1a$.friend.GetFriendRequestListResponse\x12L\n" +
	"\rGetFriendList\x12\x1c.friend.GetFriendListRequest\x1a\x1d.friend.GetFriendListResponse\x12I\n" +
	"\fDeleteFriend\x12\x1b.friend.DeleteFriendRequest\x1a\x1c.friend.DeleteFriendResponse\x12[\n" +
	"\x12UpdateFriendRemark\x12!.friend.UpdateFriendRemarkRequest\x1a\".friend.UpdateFriendRemarkResponse\x12F\n" +
	"\vBlockFriend\x12\x1a.friend.BlockFriendRequest\x1a\x1b.friend.BlockFriendResponse\x12O\n" +
	"\x0eGetBlockedList\x12\x1d.friend.GetBlockedListRequest\x1a\x1e.friend.GetBlockedListResponseB\n" +
	"Z\b./friendb\x06proto3"

var (
	file_friend_proto_rawDescOnce sync.Once
	file_friend_proto_rawDescData []byte
)

func file_friend_proto_rawDescGZIP() []byte {
	file_friend_proto_rawDescOnce.Do(func() {
		file_friend_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_friend_proto_rawDesc), len(file_friend_proto_rawDesc)))
	})
	return file_friend_proto_rawDescData
}

var file_friend_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_friend_proto_goTypes = []any{
	(*Friend)(nil),                              // 0: friend.Friend
	(*FriendRequest)(nil),                       // 1: friend.FriendRequest
	(*SendFriendRequestRequest)(nil),            // 2: friend.SendFriendRequestRequest
	(*SendFriendRequestResponse)(nil),           // 3: friend.SendFriendRequestResponse
	(*HandleFriendRequestRequest)(nil),          // 4: friend.HandleFriendRequestRequest
	(*HandleFriendRequestResponse)(nil),         // 5: friend.HandleFriendRequestResponse
	(*GetFriendRequestListRequest)(nil),         // 6: friend.GetFriendRequestListRequest
	(*GetFriendRequestListResponse)(nil),        // 7: friend.GetFriendRequestListResponse
	(*GetFriendListRequest)(nil),                // 8: friend.GetFriendListRequest
	(*GetFriendListResponse)(nil),               // 9: friend.GetFriendListResponse
	(*DeleteFriendRequest)(nil),                 // 10: friend.DeleteFriendRequest
	(*DeleteFriendResponse)(nil),                // 11: friend.DeleteFriendResponse
	(*UpdateFriendRemarkRequest)(nil),           // 12: friend.UpdateFriendRemarkRequest
	(*UpdateFriendRemarkResponse)(nil),          // 13: friend.UpdateFriendRemarkResponse
	(*BlockFriendRequest)(nil),                  // 14: friend.BlockFriendRequest
	(*BlockFriendResponse)(nil),                 // 15: friend.BlockFriendResponse
	(*GetBlockedListRequest)(nil),               // 16: friend.GetBlockedListRequest
	(*GetBlockedListResponse)(nil),              // 17: friend.GetBlockedListResponse
	(*GetUnreadFriendRequestCountRequest)(nil),  // 18: friend.GetUnreadFriendRequestCountRequest
	(*GetUnreadFriendRequestCountResponse)(nil), // 19: friend.GetUnreadFriendRequestCountResponse
}
var file_friend_proto_depIdxs = []int32{
	1,  // 0: friend.HandleFriendRequestResponse.request_info:type_name -> friend.FriendRequest
	1,  // 1: friend.GetFriendRequestListResponse.requests:type_name -> friend.FriendRequest
	0,  // 2: friend.GetFriendListResponse.friends:type_name -> friend.Friend
	0,  // 3: friend.GetBlockedListResponse.friends:type_name -> friend.Friend
	2,  // 4: friend.FriendService.SendFriendRequest:input_type -> friend.SendFriendRequestRequest
	4,  // 5: friend.FriendService.HandleFriendRequest:input_type -> friend.HandleFriendRequestRequest
	18, // 6: friend.FriendService.GetUnreadFriendRequestCount:input_type -> friend.GetUnreadFriendRequestCountRequest
	6,  // 7: friend.FriendService.GetFriendRequestList:input_type -> friend.GetFriendRequestListRequest
	8,  // 8: friend.FriendService.GetFriendList:input_type -> friend.GetFriendListRequest
	10, // 9: friend.FriendService.DeleteFriend:input_type -> friend.DeleteFriendRequest
	12, // 10: friend.FriendService.UpdateFriendRemark:input_type -> friend.UpdateFriendRemarkRequest
	14, // 11: friend.FriendService.BlockFriend:input_type -> friend.BlockFriendRequest
	16, // 12: friend.FriendService.GetBlockedList:input_type -> friend.GetBlockedListRequest
	3,  // 13: friend.FriendService.SendFriendRequest:output_type -> friend.SendFriendRequestResponse
	5,  // 14: friend.FriendService.HandleFriendRequest:output_type -> friend.HandleFriendRequestResponse
	19, // 15: friend.FriendService.GetUnreadFriendRequestCount:output_type -> friend.GetUnreadFriendRequestCountResponse
	7,  // 16: friend.FriendService.GetFriendRequestList:output_type -> friend.GetFriendRequestListResponse
	9,  // 17: friend.FriendService.GetFriendList:output_type -> friend.GetFriendListResponse
	11, // 18: friend.FriendService.DeleteFriend:output_type -> friend.DeleteFriendResponse
	13, // 19: friend.FriendService.UpdateFriendRemark:output_type -> friend.UpdateFriendRemarkResponse
	15, // 20: friend.FriendService.BlockFriend:output_type -> friend.BlockFriendResponse
	17, // 21: friend.FriendService.GetBlockedList:output_type -> friend.GetBlockedListResponse
	13, // [13:22] is the sub-list for method output_type
	4,  // [4:13] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_friend_proto_init() }
func file_friend_proto_init() {
	if File_friend_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_friend_proto_rawDesc), len(file_friend_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_friend_proto_goTypes,
		DependencyIndexes: file_friend_proto_depIdxs,
		MessageInfos:      file_friend_proto_msgTypes,
	}.Build()
	File_friend_proto = out.File
	file_friend_proto_goTypes = nil
	file_friend_proto_depIdxs = nil
}

// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: friend.proto

package friendservice

import (
	"context"

	"IM/rpc/friend/friend"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BlockFriendRequest           = friend.BlockFriendRequest
	BlockFriendResponse          = friend.BlockFriendResponse
	DeleteFriendRequest          = friend.DeleteFriendRequest
	DeleteFriendResponse         = friend.DeleteFriendResponse
	Friend                       = friend.Friend
	FriendRequest                = friend.FriendRequest
	GetFriendListRequest         = friend.GetFriendListRequest
	GetFriendListResponse        = friend.GetFriendListResponse
	GetFriendRequestListRequest  = friend.GetFriendRequestListRequest
	GetFriendRequestListResponse = friend.GetFriendRequestListResponse
	HandleFriendRequestRequest   = friend.HandleFriendRequestRequest
	HandleFriendRequestResponse  = friend.HandleFriendRequestResponse
	SendFriendRequestRequest     = friend.SendFriendRequestRequest
	SendFriendRequestResponse    = friend.SendFriendRequestResponse
	UpdateFriendRemarkRequest    = friend.UpdateFriendRemarkRequest
	UpdateFriendRemarkResponse   = friend.UpdateFriendRemarkResponse

	FriendService interface {
		// 发送好友申请
		SendFriendRequest(ctx context.Context, in *SendFriendRequestRequest, opts ...grpc.CallOption) (*SendFriendRequestResponse, error)
		// 处理好友申请
		HandleFriendRequest(ctx context.Context, in *HandleFriendRequestRequest, opts ...grpc.CallOption) (*HandleFriendRequestResponse, error)
		// 获取好友申请列表
		GetFriendRequestList(ctx context.Context, in *GetFriendRequestListRequest, opts ...grpc.CallOption) (*GetFriendRequestListResponse, error)
		// 获取好友列表
		GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error)
		// 删除好友
		DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*DeleteFriendResponse, error)
		// 更新好友备注
		UpdateFriendRemark(ctx context.Context, in *UpdateFriendRemarkRequest, opts ...grpc.CallOption) (*UpdateFriendRemarkResponse, error)
		// 拉黑好友
		BlockFriend(ctx context.Context, in *BlockFriendRequest, opts ...grpc.CallOption) (*BlockFriendResponse, error)
	}

	defaultFriendService struct {
		cli zrpc.Client
	}
)

func NewFriendService(cli zrpc.Client) FriendService {
	return &defaultFriendService{
		cli: cli,
	}
}

// 发送好友申请
func (m *defaultFriendService) SendFriendRequest(ctx context.Context, in *SendFriendRequestRequest, opts ...grpc.CallOption) (*SendFriendRequestResponse, error) {
	client := friend.NewFriendServiceClient(m.cli.Conn())
	return client.SendFriendRequest(ctx, in, opts...)
}

// 处理好友申请
func (m *defaultFriendService) HandleFriendRequest(ctx context.Context, in *HandleFriendRequestRequest, opts ...grpc.CallOption) (*HandleFriendRequestResponse, error) {
	client := friend.NewFriendServiceClient(m.cli.Conn())
	return client.HandleFriendRequest(ctx, in, opts...)
}

// 获取好友申请列表
func (m *defaultFriendService) GetFriendRequestList(ctx context.Context, in *GetFriendRequestListRequest, opts ...grpc.CallOption) (*GetFriendRequestListResponse, error) {
	client := friend.NewFriendServiceClient(m.cli.Conn())
	return client.GetFriendRequestList(ctx, in, opts...)
}

// 获取好友列表
func (m *defaultFriendService) GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...grpc.CallOption) (*GetFriendListResponse, error) {
	client := friend.NewFriendServiceClient(m.cli.Conn())
	return client.GetFriendList(ctx, in, opts...)
}

// 删除好友
func (m *defaultFriendService) DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*DeleteFriendResponse, error) {
	client := friend.NewFriendServiceClient(m.cli.Conn())
	return client.DeleteFriend(ctx, in, opts...)
}

// 更新好友备注
func (m *defaultFriendService) UpdateFriendRemark(ctx context.Context, in *UpdateFriendRemarkRequest, opts ...grpc.CallOption) (*UpdateFriendRemarkResponse, error) {
	client := friend.NewFriendServiceClient(m.cli.Conn())
	return client.UpdateFriendRemark(ctx, in, opts...)
}

// 拉黑好友
func (m *defaultFriendService) BlockFriend(ctx context.Context, in *BlockFriendRequest, opts ...grpc.CallOption) (*BlockFriendResponse, error) {
	client := friend.NewFriendServiceClient(m.cli.Conn())
	return client.BlockFriend(ctx, in, opts...)
}

// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: file.proto

package fileservice

import (
	"context"

	"IM/apps/file/rpc/file"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	UploadAvatarRequest     = file.UploadAvatarRequest
	UploadAvatarResponse    = file.UploadAvatarResponse
	UploadFileChunkRequest  = file.UploadFileChunkRequest
	UploadFileChunkResponse = file.UploadFileChunkResponse
	UploadFileInitRequest   = file.UploadFileInitRequest
	UploadFileInitResponse  = file.UploadFileInitResponse
	UploadImageRequest      = file.UploadImageRequest
	UploadImageResponse     = file.UploadImageResponse

	FileService interface {
		// 上传头像
		UploadAvatar(ctx context.Context, in *UploadAvatarRequest, opts ...grpc.CallOption) (*UploadAvatarResponse, error)
		// 上传图片
		UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
		// 上传文件初始化
		UploadFileInit(ctx context.Context, in *UploadFileInitRequest, opts ...grpc.CallOption) (*UploadFileInitResponse, error)
		// 上传文件分片
		UploadFileChunk(ctx context.Context, in *UploadFileChunkRequest, opts ...grpc.CallOption) (*UploadFileChunkResponse, error)
	}

	defaultFileService struct {
		cli zrpc.Client
	}
)

func NewFileService(cli zrpc.Client) FileService {
	return &defaultFileService{
		cli: cli,
	}
}

// 上传头像
func (m *defaultFileService) UploadAvatar(ctx context.Context, in *UploadAvatarRequest, opts ...grpc.CallOption) (*UploadAvatarResponse, error) {
	client := file.NewFileServiceClient(m.cli.Conn())
	return client.UploadAvatar(ctx, in, opts...)
}

// 上传图片
func (m *defaultFileService) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	client := file.NewFileServiceClient(m.cli.Conn())
	return client.UploadImage(ctx, in, opts...)
}

// 上传文件初始化
func (m *defaultFileService) UploadFileInit(ctx context.Context, in *UploadFileInitRequest, opts ...grpc.CallOption) (*UploadFileInitResponse, error) {
	client := file.NewFileServiceClient(m.cli.Conn())
	return client.UploadFileInit(ctx, in, opts...)
}

// 上传文件分片
func (m *defaultFileService) UploadFileChunk(ctx context.Context, in *UploadFileChunkRequest, opts ...grpc.CallOption) (*UploadFileChunkResponse, error) {
	client := file.NewFileServiceClient(m.cli.Conn())
	return client.UploadFileChunk(ctx, in, opts...)
}

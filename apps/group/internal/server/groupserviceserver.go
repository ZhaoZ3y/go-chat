// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: group.proto

package server

import (
	"context"

	"IM/apps/group/internal/logic"
	"IM/apps/group/internal/svc"
	"IM/apps/group/rpc/group"
)

type GroupServiceServer struct {
	svcCtx *svc.ServiceContext
	group.UnimplementedGroupServiceServer
}

func NewGroupServiceServer(svcCtx *svc.ServiceContext) *GroupServiceServer {
	return &GroupServiceServer{
		svcCtx: svcCtx,
	}
}

// 群组基础操作
func (s *GroupServiceServer) GroupList(ctx context.Context, in *group.GroupListRequest) (*group.GroupListResponse, error) {
	l := logic.NewGroupListLogic(ctx, s.svcCtx)
	return l.GroupList(in)
}

func (s *GroupServiceServer) GroupCreate(ctx context.Context, in *group.GroupCreateRequest) (*group.GroupCreateResponse, error) {
	l := logic.NewGroupCreateLogic(ctx, s.svcCtx)
	return l.GroupCreate(in)
}

func (s *GroupServiceServer) GroupDetail(ctx context.Context, in *group.GroupDetailRequest) (*group.GroupDetailResponse, error) {
	l := logic.NewGroupDetailLogic(ctx, s.svcCtx)
	return l.GroupDetail(in)
}

func (s *GroupServiceServer) GroupMemberList(ctx context.Context, in *group.GroupMemberListRequest) (*group.GroupMemberListResponse, error) {
	l := logic.NewGroupMemberListLogic(ctx, s.svcCtx)
	return l.GroupMemberList(in)
}

func (s *GroupServiceServer) GroupDismiss(ctx context.Context, in *group.GroupDismissRequest) (*group.GroupDismissResponse, error) {
	l := logic.NewGroupDismissLogic(ctx, s.svcCtx)
	return l.GroupDismiss(in)
}

func (s *GroupServiceServer) GroupInvite(ctx context.Context, in *group.GroupInviteRequest) (*group.GroupInviteResponse, error) {
	l := logic.NewGroupInviteLogic(ctx, s.svcCtx)
	return l.GroupInvite(in)
}

func (s *GroupServiceServer) GetInviteFriends(ctx context.Context, in *group.GetInviteFriendsRequest) (*group.GetInviteFriendsResponse, error) {
	l := logic.NewGetInviteFriendsLogic(ctx, s.svcCtx)
	return l.GetInviteFriends(in)
}

func (s *GroupServiceServer) GroupSecede(ctx context.Context, in *group.GroupSecedeRequest) (*group.GroupSecedeResponse, error) {
	l := logic.NewGroupSecedeLogic(ctx, s.svcCtx)
	return l.GroupSecede(in)
}

func (s *GroupServiceServer) GroupSetting(ctx context.Context, in *group.GroupSettingRequest) (*group.GroupSettingResponse, error) {
	l := logic.NewGroupSettingLogic(ctx, s.svcCtx)
	return l.GroupSetting(in)
}

func (s *GroupServiceServer) GroupRemarkUpdate(ctx context.Context, in *group.GroupRemarkUpdateRequest) (*group.GroupRemarkUpdateResponse, error) {
	l := logic.NewGroupRemarkUpdateLogic(ctx, s.svcCtx)
	return l.GroupRemarkUpdate(in)
}

func (s *GroupServiceServer) GroupRemoveMember(ctx context.Context, in *group.GroupRemoveMemberRequest) (*group.GroupRemoveMemberResponse, error) {
	l := logic.NewGroupRemoveMemberLogic(ctx, s.svcCtx)
	return l.GroupRemoveMember(in)
}

func (s *GroupServiceServer) GroupOvertList(ctx context.Context, in *group.GroupOvertListRequest) (*group.GroupOvertListResponse, error) {
	l := logic.NewGroupOvertListLogic(ctx, s.svcCtx)
	return l.GroupOvertList(in)
}

func (s *GroupServiceServer) GroupHandover(ctx context.Context, in *group.GroupHandoverRequest) (*group.GroupHandoverResponse, error) {
	l := logic.NewGroupHandoverLogic(ctx, s.svcCtx)
	return l.GroupHandover(in)
}

func (s *GroupServiceServer) GroupAssignAdmin(ctx context.Context, in *group.GroupAssignAdminRequest) (*group.GroupAssignAdminResponse, error) {
	l := logic.NewGroupAssignAdminLogic(ctx, s.svcCtx)
	return l.GroupAssignAdmin(in)
}

func (s *GroupServiceServer) GroupNoSpeak(ctx context.Context, in *group.GroupNoSpeakRequest) (*group.GroupNoSpeakResponse, error) {
	l := logic.NewGroupNoSpeakLogic(ctx, s.svcCtx)
	return l.GroupNoSpeak(in)
}

func (s *GroupServiceServer) GroupMute(ctx context.Context, in *group.GroupMuteRequest) (*group.GroupMuteResponse, error) {
	l := logic.NewGroupMuteLogic(ctx, s.svcCtx)
	return l.GroupMute(in)
}

func (s *GroupServiceServer) GroupOvert(ctx context.Context, in *group.GroupOvertRequest) (*group.GroupOvertResponse, error) {
	l := logic.NewGroupOvertLogic(ctx, s.svcCtx)
	return l.GroupOvert(in)
}

// 入群申请操作
func (s *GroupServiceServer) ApplyCreate(ctx context.Context, in *group.ApplyCreateRequest) (*group.ApplyCreateResponse, error) {
	l := logic.NewApplyCreateLogic(ctx, s.svcCtx)
	return l.ApplyCreate(in)
}

func (s *GroupServiceServer) ApplyDelete(ctx context.Context, in *group.ApplyDeleteRequest) (*group.ApplyDeleteResponse, error) {
	l := logic.NewApplyDeleteLogic(ctx, s.svcCtx)
	return l.ApplyDelete(in)
}

func (s *GroupServiceServer) ApplyAgree(ctx context.Context, in *group.ApplyAgreeRequest) (*group.ApplyAgreeResponse, error) {
	l := logic.NewApplyAgreeLogic(ctx, s.svcCtx)
	return l.ApplyAgree(in)
}

func (s *GroupServiceServer) ApplyDecline(ctx context.Context, in *group.ApplyDeclineRequest) (*group.ApplyDeclineResponse, error) {
	l := logic.NewApplyDeclineLogic(ctx, s.svcCtx)
	return l.ApplyDecline(in)
}

func (s *GroupServiceServer) ApplyList(ctx context.Context, in *group.ApplyListRequest) (*group.ApplyListResponse, error) {
	l := logic.NewApplyListLogic(ctx, s.svcCtx)
	return l.ApplyList(in)
}

func (s *GroupServiceServer) ApplyAll(ctx context.Context, in *group.ApplyAllRequest) (*group.ApplyAllResponse, error) {
	l := logic.NewApplyAllLogic(ctx, s.svcCtx)
	return l.ApplyAll(in)
}

func (s *GroupServiceServer) ApplyUnread(ctx context.Context, in *group.ApplyUnreadRequest) (*group.ApplyUnreadResponse, error) {
	l := logic.NewApplyUnreadLogic(ctx, s.svcCtx)
	return l.ApplyUnread(in)
}

// 群公告操作
func (s *GroupServiceServer) NoticeDelete(ctx context.Context, in *group.NoticeDeleteRequest) (*group.NoticeDeleteResponse, error) {
	l := logic.NewNoticeDeleteLogic(ctx, s.svcCtx)
	return l.NoticeDelete(in)
}

func (s *GroupServiceServer) NoticeEdit(ctx context.Context, in *group.NoticeEditRequest) (*group.NoticeEditResponse, error) {
	l := logic.NewNoticeEditLogic(ctx, s.svcCtx)
	return l.NoticeEdit(in)
}

func (s *GroupServiceServer) NoticeList(ctx context.Context, in *group.NoticeListRequest) (*group.NoticeListResponse, error) {
	l := logic.NewNoticeListLogic(ctx, s.svcCtx)
	return l.NoticeList(in)
}

// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: group.proto

package groupservice

import (
	"context"

	"IM/apps/group/rpc/group"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ApplyAgreeRequest                         = group.ApplyAgreeRequest
	ApplyAgreeResponse                        = group.ApplyAgreeResponse
	ApplyAllRequest                           = group.ApplyAllRequest
	ApplyAllResponse                          = group.ApplyAllResponse
	ApplyAllResponse_GroupApply               = group.ApplyAllResponse_GroupApply
	ApplyCreateRequest                        = group.ApplyCreateRequest
	ApplyCreateResponse                       = group.ApplyCreateResponse
	ApplyDeclineRequest                       = group.ApplyDeclineRequest
	ApplyDeclineResponse                      = group.ApplyDeclineResponse
	ApplyDeleteRequest                        = group.ApplyDeleteRequest
	ApplyDeleteResponse                       = group.ApplyDeleteResponse
	ApplyListRequest                          = group.ApplyListRequest
	ApplyListResponse                         = group.ApplyListResponse
	ApplyListResponse_GroupApply              = group.ApplyListResponse_GroupApply
	ApplyUnreadRequest                        = group.ApplyUnreadRequest
	ApplyUnreadResponse                       = group.ApplyUnreadResponse
	GetInviteFriendsRequest                   = group.GetInviteFriendsRequest
	GetInviteFriendsResponse                  = group.GetInviteFriendsResponse
	GetInviteFriendsResponse_GetInviteFriends = group.GetInviteFriendsResponse_GetInviteFriends
	GroupAssignAdminRequest                   = group.GroupAssignAdminRequest
	GroupAssignAdminResponse                  = group.GroupAssignAdminResponse
	GroupCreateRequest                        = group.GroupCreateRequest
	GroupCreateResponse                       = group.GroupCreateResponse
	GroupDetailRequest                        = group.GroupDetailRequest
	GroupDetailResponse                       = group.GroupDetailResponse
	GroupDismissRequest                       = group.GroupDismissRequest
	GroupDismissResponse                      = group.GroupDismissResponse
	GroupHandoverRequest                      = group.GroupHandoverRequest
	GroupHandoverResponse                     = group.GroupHandoverResponse
	GroupInviteRequest                        = group.GroupInviteRequest
	GroupInviteResponse                       = group.GroupInviteResponse
	GroupListRequest                          = group.GroupListRequest
	GroupListResponse                         = group.GroupListResponse
	GroupListResponse_GroupList               = group.GroupListResponse_GroupList
	GroupMemberListRequest                    = group.GroupMemberListRequest
	GroupMemberListResponse                   = group.GroupMemberListResponse
	GroupMemberListResponse_GroupMemberList   = group.GroupMemberListResponse_GroupMemberList
	GroupMuteRequest                          = group.GroupMuteRequest
	GroupMuteResponse                         = group.GroupMuteResponse
	GroupNoSpeakRequest                       = group.GroupNoSpeakRequest
	GroupNoSpeakResponse                      = group.GroupNoSpeakResponse
	GroupOvertListRequest                     = group.GroupOvertListRequest
	GroupOvertListResponse                    = group.GroupOvertListResponse
	GroupOvertListResponse_GroupOvertList     = group.GroupOvertListResponse_GroupOvertList
	GroupOvertRequest                         = group.GroupOvertRequest
	GroupOvertResponse                        = group.GroupOvertResponse
	GroupRemarkUpdateRequest                  = group.GroupRemarkUpdateRequest
	GroupRemarkUpdateResponse                 = group.GroupRemarkUpdateResponse
	GroupRemoveMemberRequest                  = group.GroupRemoveMemberRequest
	GroupRemoveMemberResponse                 = group.GroupRemoveMemberResponse
	GroupSecedeRequest                        = group.GroupSecedeRequest
	GroupSecedeResponse                       = group.GroupSecedeResponse
	GroupSettingRequest                       = group.GroupSettingRequest
	GroupSettingResponse                      = group.GroupSettingResponse
	NoticeDeleteRequest                       = group.NoticeDeleteRequest
	NoticeDeleteResponse                      = group.NoticeDeleteResponse
	NoticeEditRequest                         = group.NoticeEditRequest
	NoticeEditResponse                        = group.NoticeEditResponse
	NoticeListRequest                         = group.NoticeListRequest
	NoticeListResponse                        = group.NoticeListResponse
	NoticeListResponse_Notice                 = group.NoticeListResponse_Notice

	GroupService interface {
		// 群组基础操作
		GroupList(ctx context.Context, in *GroupListRequest, opts ...grpc.CallOption) (*GroupListResponse, error)
		GroupCreate(ctx context.Context, in *GroupCreateRequest, opts ...grpc.CallOption) (*GroupCreateResponse, error)
		GroupDetail(ctx context.Context, in *GroupDetailRequest, opts ...grpc.CallOption) (*GroupDetailResponse, error)
		GroupMemberList(ctx context.Context, in *GroupMemberListRequest, opts ...grpc.CallOption) (*GroupMemberListResponse, error)
		GroupDismiss(ctx context.Context, in *GroupDismissRequest, opts ...grpc.CallOption) (*GroupDismissResponse, error)
		GroupInvite(ctx context.Context, in *GroupInviteRequest, opts ...grpc.CallOption) (*GroupInviteResponse, error)
		GetInviteFriends(ctx context.Context, in *GetInviteFriendsRequest, opts ...grpc.CallOption) (*GetInviteFriendsResponse, error)
		GroupSecede(ctx context.Context, in *GroupSecedeRequest, opts ...grpc.CallOption) (*GroupSecedeResponse, error)
		GroupSetting(ctx context.Context, in *GroupSettingRequest, opts ...grpc.CallOption) (*GroupSettingResponse, error)
		GroupRemarkUpdate(ctx context.Context, in *GroupRemarkUpdateRequest, opts ...grpc.CallOption) (*GroupRemarkUpdateResponse, error)
		GroupRemoveMember(ctx context.Context, in *GroupRemoveMemberRequest, opts ...grpc.CallOption) (*GroupRemoveMemberResponse, error)
		GroupOvertList(ctx context.Context, in *GroupOvertListRequest, opts ...grpc.CallOption) (*GroupOvertListResponse, error)
		GroupHandover(ctx context.Context, in *GroupHandoverRequest, opts ...grpc.CallOption) (*GroupHandoverResponse, error)
		GroupAssignAdmin(ctx context.Context, in *GroupAssignAdminRequest, opts ...grpc.CallOption) (*GroupAssignAdminResponse, error)
		GroupNoSpeak(ctx context.Context, in *GroupNoSpeakRequest, opts ...grpc.CallOption) (*GroupNoSpeakResponse, error)
		GroupMute(ctx context.Context, in *GroupMuteRequest, opts ...grpc.CallOption) (*GroupMuteResponse, error)
		GroupOvert(ctx context.Context, in *GroupOvertRequest, opts ...grpc.CallOption) (*GroupOvertResponse, error)
		// 入群申请操作
		ApplyCreate(ctx context.Context, in *ApplyCreateRequest, opts ...grpc.CallOption) (*ApplyCreateResponse, error)
		ApplyDelete(ctx context.Context, in *ApplyDeleteRequest, opts ...grpc.CallOption) (*ApplyDeleteResponse, error)
		ApplyAgree(ctx context.Context, in *ApplyAgreeRequest, opts ...grpc.CallOption) (*ApplyAgreeResponse, error)
		ApplyDecline(ctx context.Context, in *ApplyDeclineRequest, opts ...grpc.CallOption) (*ApplyDeclineResponse, error)
		ApplyList(ctx context.Context, in *ApplyListRequest, opts ...grpc.CallOption) (*ApplyListResponse, error)
		ApplyAll(ctx context.Context, in *ApplyAllRequest, opts ...grpc.CallOption) (*ApplyAllResponse, error)
		ApplyUnread(ctx context.Context, in *ApplyUnreadRequest, opts ...grpc.CallOption) (*ApplyUnreadResponse, error)
		// 群公告操作
		NoticeDelete(ctx context.Context, in *NoticeDeleteRequest, opts ...grpc.CallOption) (*NoticeDeleteResponse, error)
		NoticeEdit(ctx context.Context, in *NoticeEditRequest, opts ...grpc.CallOption) (*NoticeEditResponse, error)
		NoticeList(ctx context.Context, in *NoticeListRequest, opts ...grpc.CallOption) (*NoticeListResponse, error)
	}

	defaultGroupService struct {
		cli zrpc.Client
	}
)

func NewGroupService(cli zrpc.Client) GroupService {
	return &defaultGroupService{
		cli: cli,
	}
}

// 群组基础操作
func (m *defaultGroupService) GroupList(ctx context.Context, in *GroupListRequest, opts ...grpc.CallOption) (*GroupListResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GroupList(ctx, in, opts...)
}

func (m *defaultGroupService) GroupCreate(ctx context.Context, in *GroupCreateRequest, opts ...grpc.CallOption) (*GroupCreateResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GroupCreate(ctx, in, opts...)
}

func (m *defaultGroupService) GroupDetail(ctx context.Context, in *GroupDetailRequest, opts ...grpc.CallOption) (*GroupDetailResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GroupDetail(ctx, in, opts...)
}

func (m *defaultGroupService) GroupMemberList(ctx context.Context, in *GroupMemberListRequest, opts ...grpc.CallOption) (*GroupMemberListResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GroupMemberList(ctx, in, opts...)
}

func (m *defaultGroupService) GroupDismiss(ctx context.Context, in *GroupDismissRequest, opts ...grpc.CallOption) (*GroupDismissResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GroupDismiss(ctx, in, opts...)
}

func (m *defaultGroupService) GroupInvite(ctx context.Context, in *GroupInviteRequest, opts ...grpc.CallOption) (*GroupInviteResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GroupInvite(ctx, in, opts...)
}

func (m *defaultGroupService) GetInviteFriends(ctx context.Context, in *GetInviteFriendsRequest, opts ...grpc.CallOption) (*GetInviteFriendsResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GetInviteFriends(ctx, in, opts...)
}

func (m *defaultGroupService) GroupSecede(ctx context.Context, in *GroupSecedeRequest, opts ...grpc.CallOption) (*GroupSecedeResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GroupSecede(ctx, in, opts...)
}

func (m *defaultGroupService) GroupSetting(ctx context.Context, in *GroupSettingRequest, opts ...grpc.CallOption) (*GroupSettingResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GroupSetting(ctx, in, opts...)
}

func (m *defaultGroupService) GroupRemarkUpdate(ctx context.Context, in *GroupRemarkUpdateRequest, opts ...grpc.CallOption) (*GroupRemarkUpdateResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GroupRemarkUpdate(ctx, in, opts...)
}

func (m *defaultGroupService) GroupRemoveMember(ctx context.Context, in *GroupRemoveMemberRequest, opts ...grpc.CallOption) (*GroupRemoveMemberResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GroupRemoveMember(ctx, in, opts...)
}

func (m *defaultGroupService) GroupOvertList(ctx context.Context, in *GroupOvertListRequest, opts ...grpc.CallOption) (*GroupOvertListResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GroupOvertList(ctx, in, opts...)
}

func (m *defaultGroupService) GroupHandover(ctx context.Context, in *GroupHandoverRequest, opts ...grpc.CallOption) (*GroupHandoverResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GroupHandover(ctx, in, opts...)
}

func (m *defaultGroupService) GroupAssignAdmin(ctx context.Context, in *GroupAssignAdminRequest, opts ...grpc.CallOption) (*GroupAssignAdminResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GroupAssignAdmin(ctx, in, opts...)
}

func (m *defaultGroupService) GroupNoSpeak(ctx context.Context, in *GroupNoSpeakRequest, opts ...grpc.CallOption) (*GroupNoSpeakResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GroupNoSpeak(ctx, in, opts...)
}

func (m *defaultGroupService) GroupMute(ctx context.Context, in *GroupMuteRequest, opts ...grpc.CallOption) (*GroupMuteResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GroupMute(ctx, in, opts...)
}

func (m *defaultGroupService) GroupOvert(ctx context.Context, in *GroupOvertRequest, opts ...grpc.CallOption) (*GroupOvertResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.GroupOvert(ctx, in, opts...)
}

// 入群申请操作
func (m *defaultGroupService) ApplyCreate(ctx context.Context, in *ApplyCreateRequest, opts ...grpc.CallOption) (*ApplyCreateResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.ApplyCreate(ctx, in, opts...)
}

func (m *defaultGroupService) ApplyDelete(ctx context.Context, in *ApplyDeleteRequest, opts ...grpc.CallOption) (*ApplyDeleteResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.ApplyDelete(ctx, in, opts...)
}

func (m *defaultGroupService) ApplyAgree(ctx context.Context, in *ApplyAgreeRequest, opts ...grpc.CallOption) (*ApplyAgreeResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.ApplyAgree(ctx, in, opts...)
}

func (m *defaultGroupService) ApplyDecline(ctx context.Context, in *ApplyDeclineRequest, opts ...grpc.CallOption) (*ApplyDeclineResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.ApplyDecline(ctx, in, opts...)
}

func (m *defaultGroupService) ApplyList(ctx context.Context, in *ApplyListRequest, opts ...grpc.CallOption) (*ApplyListResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.ApplyList(ctx, in, opts...)
}

func (m *defaultGroupService) ApplyAll(ctx context.Context, in *ApplyAllRequest, opts ...grpc.CallOption) (*ApplyAllResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.ApplyAll(ctx, in, opts...)
}

func (m *defaultGroupService) ApplyUnread(ctx context.Context, in *ApplyUnreadRequest, opts ...grpc.CallOption) (*ApplyUnreadResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.ApplyUnread(ctx, in, opts...)
}

// 群公告操作
func (m *defaultGroupService) NoticeDelete(ctx context.Context, in *NoticeDeleteRequest, opts ...grpc.CallOption) (*NoticeDeleteResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.NoticeDelete(ctx, in, opts...)
}

func (m *defaultGroupService) NoticeEdit(ctx context.Context, in *NoticeEditRequest, opts ...grpc.CallOption) (*NoticeEditResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.NoticeEdit(ctx, in, opts...)
}

func (m *defaultGroupService) NoticeList(ctx context.Context, in *NoticeListRequest, opts ...grpc.CallOption) (*NoticeListResponse, error) {
	client := group.NewGroupServiceClient(m.cli.Conn())
	return client.NoticeList(ctx, in, opts...)
}

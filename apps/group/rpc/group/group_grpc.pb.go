// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: idl/group/group.proto

package group

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GroupService_GroupList_FullMethodName         = "/group.v1.GroupService/GroupList"
	GroupService_GroupCreate_FullMethodName       = "/group.v1.GroupService/GroupCreate"
	GroupService_GroupDetail_FullMethodName       = "/group.v1.GroupService/GroupDetail"
	GroupService_GroupMemberList_FullMethodName   = "/group.v1.GroupService/GroupMemberList"
	GroupService_GroupDismiss_FullMethodName      = "/group.v1.GroupService/GroupDismiss"
	GroupService_GroupInvite_FullMethodName       = "/group.v1.GroupService/GroupInvite"
	GroupService_GetInviteFriends_FullMethodName  = "/group.v1.GroupService/GetInviteFriends"
	GroupService_GroupSecede_FullMethodName       = "/group.v1.GroupService/GroupSecede"
	GroupService_GroupSetting_FullMethodName      = "/group.v1.GroupService/GroupSetting"
	GroupService_GroupRemarkUpdate_FullMethodName = "/group.v1.GroupService/GroupRemarkUpdate"
	GroupService_GroupRemoveMember_FullMethodName = "/group.v1.GroupService/GroupRemoveMember"
	GroupService_GroupOvertList_FullMethodName    = "/group.v1.GroupService/GroupOvertList"
	GroupService_GroupHandover_FullMethodName     = "/group.v1.GroupService/GroupHandover"
	GroupService_GroupAssignAdmin_FullMethodName  = "/group.v1.GroupService/GroupAssignAdmin"
	GroupService_GroupNoSpeak_FullMethodName      = "/group.v1.GroupService/GroupNoSpeak"
	GroupService_GroupMute_FullMethodName         = "/group.v1.GroupService/GroupMute"
	GroupService_GroupOvert_FullMethodName        = "/group.v1.GroupService/GroupOvert"
	GroupService_ApplyCreate_FullMethodName       = "/group.v1.GroupService/ApplyCreate"
	GroupService_ApplyDelete_FullMethodName       = "/group.v1.GroupService/ApplyDelete"
	GroupService_ApplyAgree_FullMethodName        = "/group.v1.GroupService/ApplyAgree"
	GroupService_ApplyDecline_FullMethodName      = "/group.v1.GroupService/ApplyDecline"
	GroupService_ApplyList_FullMethodName         = "/group.v1.GroupService/ApplyList"
	GroupService_ApplyAll_FullMethodName          = "/group.v1.GroupService/ApplyAll"
	GroupService_ApplyUnread_FullMethodName       = "/group.v1.GroupService/ApplyUnread"
	GroupService_NoticeDelete_FullMethodName      = "/group.v1.GroupService/NoticeDelete"
	GroupService_NoticeEdit_FullMethodName        = "/group.v1.GroupService/NoticeEdit"
	GroupService_NoticeList_FullMethodName        = "/group.v1.GroupService/NoticeList"
)

// GroupServiceClient is the client API for GroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupServiceClient interface {
	// 群组基础操作
	GroupList(ctx context.Context, in *GroupListRequest, opts ...grpc.CallOption) (*GroupListResponse, error)
	GroupCreate(ctx context.Context, in *GroupCreateRequest, opts ...grpc.CallOption) (*GroupCreateResponse, error)
	GroupDetail(ctx context.Context, in *GroupDetailRequest, opts ...grpc.CallOption) (*GroupDetailResponse, error)
	GroupMemberList(ctx context.Context, in *GroupMemberListRequest, opts ...grpc.CallOption) (*GroupMemberListResponse, error)
	GroupDismiss(ctx context.Context, in *GroupDismissRequest, opts ...grpc.CallOption) (*GroupDismissResponse, error)
	GroupInvite(ctx context.Context, in *GroupInviteRequest, opts ...grpc.CallOption) (*GroupInviteResponse, error)
	GetInviteFriends(ctx context.Context, in *GetInviteFriendsRequest, opts ...grpc.CallOption) (*GetInviteFriendsResponse, error)
	GroupSecede(ctx context.Context, in *GroupSecedeRequest, opts ...grpc.CallOption) (*GroupSecedeResponse, error)
	GroupSetting(ctx context.Context, in *GroupSettingRequest, opts ...grpc.CallOption) (*GroupSettingResponse, error)
	GroupRemarkUpdate(ctx context.Context, in *GroupRemarkUpdateRequest, opts ...grpc.CallOption) (*GroupRemarkUpdateResponse, error)
	GroupRemoveMember(ctx context.Context, in *GroupRemoveMemberRequest, opts ...grpc.CallOption) (*GroupRemoveMemberResponse, error)
	GroupOvertList(ctx context.Context, in *GroupOvertListRequest, opts ...grpc.CallOption) (*GroupOvertListResponse, error)
	GroupHandover(ctx context.Context, in *GroupHandoverRequest, opts ...grpc.CallOption) (*GroupHandoverResponse, error)
	GroupAssignAdmin(ctx context.Context, in *GroupAssignAdminRequest, opts ...grpc.CallOption) (*GroupAssignAdminResponse, error)
	GroupNoSpeak(ctx context.Context, in *GroupNoSpeakRequest, opts ...grpc.CallOption) (*GroupNoSpeakResponse, error)
	GroupMute(ctx context.Context, in *GroupMuteRequest, opts ...grpc.CallOption) (*GroupMuteResponse, error)
	GroupOvert(ctx context.Context, in *GroupOvertRequest, opts ...grpc.CallOption) (*GroupOvertResponse, error)
	// 入群申请操作
	ApplyCreate(ctx context.Context, in *ApplyCreateRequest, opts ...grpc.CallOption) (*ApplyCreateResponse, error)
	ApplyDelete(ctx context.Context, in *ApplyDeleteRequest, opts ...grpc.CallOption) (*ApplyDeleteResponse, error)
	ApplyAgree(ctx context.Context, in *ApplyAgreeRequest, opts ...grpc.CallOption) (*ApplyAgreeResponse, error)
	ApplyDecline(ctx context.Context, in *ApplyDeclineRequest, opts ...grpc.CallOption) (*ApplyDeclineResponse, error)
	ApplyList(ctx context.Context, in *ApplyListRequest, opts ...grpc.CallOption) (*ApplyListResponse, error)
	ApplyAll(ctx context.Context, in *ApplyAllRequest, opts ...grpc.CallOption) (*ApplyAllResponse, error)
	ApplyUnread(ctx context.Context, in *ApplyUnreadRequest, opts ...grpc.CallOption) (*ApplyUnreadResponse, error)
	// 群公告操作
	NoticeDelete(ctx context.Context, in *NoticeDeleteRequest, opts ...grpc.CallOption) (*NoticeDeleteResponse, error)
	NoticeEdit(ctx context.Context, in *NoticeEditRequest, opts ...grpc.CallOption) (*NoticeEditResponse, error)
	NoticeList(ctx context.Context, in *NoticeListRequest, opts ...grpc.CallOption) (*NoticeListResponse, error)
}

type groupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupServiceClient(cc grpc.ClientConnInterface) GroupServiceClient {
	return &groupServiceClient{cc}
}

func (c *groupServiceClient) GroupList(ctx context.Context, in *GroupListRequest, opts ...grpc.CallOption) (*GroupListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupListResponse)
	err := c.cc.Invoke(ctx, GroupService_GroupList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GroupCreate(ctx context.Context, in *GroupCreateRequest, opts ...grpc.CallOption) (*GroupCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupCreateResponse)
	err := c.cc.Invoke(ctx, GroupService_GroupCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GroupDetail(ctx context.Context, in *GroupDetailRequest, opts ...grpc.CallOption) (*GroupDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupDetailResponse)
	err := c.cc.Invoke(ctx, GroupService_GroupDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GroupMemberList(ctx context.Context, in *GroupMemberListRequest, opts ...grpc.CallOption) (*GroupMemberListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupMemberListResponse)
	err := c.cc.Invoke(ctx, GroupService_GroupMemberList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GroupDismiss(ctx context.Context, in *GroupDismissRequest, opts ...grpc.CallOption) (*GroupDismissResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupDismissResponse)
	err := c.cc.Invoke(ctx, GroupService_GroupDismiss_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GroupInvite(ctx context.Context, in *GroupInviteRequest, opts ...grpc.CallOption) (*GroupInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupInviteResponse)
	err := c.cc.Invoke(ctx, GroupService_GroupInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GetInviteFriends(ctx context.Context, in *GetInviteFriendsRequest, opts ...grpc.CallOption) (*GetInviteFriendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInviteFriendsResponse)
	err := c.cc.Invoke(ctx, GroupService_GetInviteFriends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GroupSecede(ctx context.Context, in *GroupSecedeRequest, opts ...grpc.CallOption) (*GroupSecedeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupSecedeResponse)
	err := c.cc.Invoke(ctx, GroupService_GroupSecede_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GroupSetting(ctx context.Context, in *GroupSettingRequest, opts ...grpc.CallOption) (*GroupSettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupSettingResponse)
	err := c.cc.Invoke(ctx, GroupService_GroupSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GroupRemarkUpdate(ctx context.Context, in *GroupRemarkUpdateRequest, opts ...grpc.CallOption) (*GroupRemarkUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupRemarkUpdateResponse)
	err := c.cc.Invoke(ctx, GroupService_GroupRemarkUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GroupRemoveMember(ctx context.Context, in *GroupRemoveMemberRequest, opts ...grpc.CallOption) (*GroupRemoveMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupRemoveMemberResponse)
	err := c.cc.Invoke(ctx, GroupService_GroupRemoveMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GroupOvertList(ctx context.Context, in *GroupOvertListRequest, opts ...grpc.CallOption) (*GroupOvertListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupOvertListResponse)
	err := c.cc.Invoke(ctx, GroupService_GroupOvertList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GroupHandover(ctx context.Context, in *GroupHandoverRequest, opts ...grpc.CallOption) (*GroupHandoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupHandoverResponse)
	err := c.cc.Invoke(ctx, GroupService_GroupHandover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GroupAssignAdmin(ctx context.Context, in *GroupAssignAdminRequest, opts ...grpc.CallOption) (*GroupAssignAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupAssignAdminResponse)
	err := c.cc.Invoke(ctx, GroupService_GroupAssignAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GroupNoSpeak(ctx context.Context, in *GroupNoSpeakRequest, opts ...grpc.CallOption) (*GroupNoSpeakResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupNoSpeakResponse)
	err := c.cc.Invoke(ctx, GroupService_GroupNoSpeak_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GroupMute(ctx context.Context, in *GroupMuteRequest, opts ...grpc.CallOption) (*GroupMuteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupMuteResponse)
	err := c.cc.Invoke(ctx, GroupService_GroupMute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) GroupOvert(ctx context.Context, in *GroupOvertRequest, opts ...grpc.CallOption) (*GroupOvertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupOvertResponse)
	err := c.cc.Invoke(ctx, GroupService_GroupOvert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) ApplyCreate(ctx context.Context, in *ApplyCreateRequest, opts ...grpc.CallOption) (*ApplyCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyCreateResponse)
	err := c.cc.Invoke(ctx, GroupService_ApplyCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) ApplyDelete(ctx context.Context, in *ApplyDeleteRequest, opts ...grpc.CallOption) (*ApplyDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyDeleteResponse)
	err := c.cc.Invoke(ctx, GroupService_ApplyDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) ApplyAgree(ctx context.Context, in *ApplyAgreeRequest, opts ...grpc.CallOption) (*ApplyAgreeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyAgreeResponse)
	err := c.cc.Invoke(ctx, GroupService_ApplyAgree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) ApplyDecline(ctx context.Context, in *ApplyDeclineRequest, opts ...grpc.CallOption) (*ApplyDeclineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyDeclineResponse)
	err := c.cc.Invoke(ctx, GroupService_ApplyDecline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) ApplyList(ctx context.Context, in *ApplyListRequest, opts ...grpc.CallOption) (*ApplyListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyListResponse)
	err := c.cc.Invoke(ctx, GroupService_ApplyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) ApplyAll(ctx context.Context, in *ApplyAllRequest, opts ...grpc.CallOption) (*ApplyAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyAllResponse)
	err := c.cc.Invoke(ctx, GroupService_ApplyAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) ApplyUnread(ctx context.Context, in *ApplyUnreadRequest, opts ...grpc.CallOption) (*ApplyUnreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyUnreadResponse)
	err := c.cc.Invoke(ctx, GroupService_ApplyUnread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) NoticeDelete(ctx context.Context, in *NoticeDeleteRequest, opts ...grpc.CallOption) (*NoticeDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoticeDeleteResponse)
	err := c.cc.Invoke(ctx, GroupService_NoticeDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) NoticeEdit(ctx context.Context, in *NoticeEditRequest, opts ...grpc.CallOption) (*NoticeEditResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoticeEditResponse)
	err := c.cc.Invoke(ctx, GroupService_NoticeEdit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) NoticeList(ctx context.Context, in *NoticeListRequest, opts ...grpc.CallOption) (*NoticeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoticeListResponse)
	err := c.cc.Invoke(ctx, GroupService_NoticeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServiceServer is the server API for GroupService service.
// All implementations must embed UnimplementedGroupServiceServer
// for forward compatibility.
type GroupServiceServer interface {
	// 群组基础操作
	GroupList(context.Context, *GroupListRequest) (*GroupListResponse, error)
	GroupCreate(context.Context, *GroupCreateRequest) (*GroupCreateResponse, error)
	GroupDetail(context.Context, *GroupDetailRequest) (*GroupDetailResponse, error)
	GroupMemberList(context.Context, *GroupMemberListRequest) (*GroupMemberListResponse, error)
	GroupDismiss(context.Context, *GroupDismissRequest) (*GroupDismissResponse, error)
	GroupInvite(context.Context, *GroupInviteRequest) (*GroupInviteResponse, error)
	GetInviteFriends(context.Context, *GetInviteFriendsRequest) (*GetInviteFriendsResponse, error)
	GroupSecede(context.Context, *GroupSecedeRequest) (*GroupSecedeResponse, error)
	GroupSetting(context.Context, *GroupSettingRequest) (*GroupSettingResponse, error)
	GroupRemarkUpdate(context.Context, *GroupRemarkUpdateRequest) (*GroupRemarkUpdateResponse, error)
	GroupRemoveMember(context.Context, *GroupRemoveMemberRequest) (*GroupRemoveMemberResponse, error)
	GroupOvertList(context.Context, *GroupOvertListRequest) (*GroupOvertListResponse, error)
	GroupHandover(context.Context, *GroupHandoverRequest) (*GroupHandoverResponse, error)
	GroupAssignAdmin(context.Context, *GroupAssignAdminRequest) (*GroupAssignAdminResponse, error)
	GroupNoSpeak(context.Context, *GroupNoSpeakRequest) (*GroupNoSpeakResponse, error)
	GroupMute(context.Context, *GroupMuteRequest) (*GroupMuteResponse, error)
	GroupOvert(context.Context, *GroupOvertRequest) (*GroupOvertResponse, error)
	// 入群申请操作
	ApplyCreate(context.Context, *ApplyCreateRequest) (*ApplyCreateResponse, error)
	ApplyDelete(context.Context, *ApplyDeleteRequest) (*ApplyDeleteResponse, error)
	ApplyAgree(context.Context, *ApplyAgreeRequest) (*ApplyAgreeResponse, error)
	ApplyDecline(context.Context, *ApplyDeclineRequest) (*ApplyDeclineResponse, error)
	ApplyList(context.Context, *ApplyListRequest) (*ApplyListResponse, error)
	ApplyAll(context.Context, *ApplyAllRequest) (*ApplyAllResponse, error)
	ApplyUnread(context.Context, *ApplyUnreadRequest) (*ApplyUnreadResponse, error)
	// 群公告操作
	NoticeDelete(context.Context, *NoticeDeleteRequest) (*NoticeDeleteResponse, error)
	NoticeEdit(context.Context, *NoticeEditRequest) (*NoticeEditResponse, error)
	NoticeList(context.Context, *NoticeListRequest) (*NoticeListResponse, error)
	mustEmbedUnimplementedGroupServiceServer()
}

// UnimplementedGroupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGroupServiceServer struct{}

func (UnimplementedGroupServiceServer) GroupList(context.Context, *GroupListRequest) (*GroupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupList not implemented")
}
func (UnimplementedGroupServiceServer) GroupCreate(context.Context, *GroupCreateRequest) (*GroupCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupCreate not implemented")
}
func (UnimplementedGroupServiceServer) GroupDetail(context.Context, *GroupDetailRequest) (*GroupDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDetail not implemented")
}
func (UnimplementedGroupServiceServer) GroupMemberList(context.Context, *GroupMemberListRequest) (*GroupMemberListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMemberList not implemented")
}
func (UnimplementedGroupServiceServer) GroupDismiss(context.Context, *GroupDismissRequest) (*GroupDismissResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDismiss not implemented")
}
func (UnimplementedGroupServiceServer) GroupInvite(context.Context, *GroupInviteRequest) (*GroupInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInvite not implemented")
}
func (UnimplementedGroupServiceServer) GetInviteFriends(context.Context, *GetInviteFriendsRequest) (*GetInviteFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInviteFriends not implemented")
}
func (UnimplementedGroupServiceServer) GroupSecede(context.Context, *GroupSecedeRequest) (*GroupSecedeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupSecede not implemented")
}
func (UnimplementedGroupServiceServer) GroupSetting(context.Context, *GroupSettingRequest) (*GroupSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupSetting not implemented")
}
func (UnimplementedGroupServiceServer) GroupRemarkUpdate(context.Context, *GroupRemarkUpdateRequest) (*GroupRemarkUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupRemarkUpdate not implemented")
}
func (UnimplementedGroupServiceServer) GroupRemoveMember(context.Context, *GroupRemoveMemberRequest) (*GroupRemoveMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupRemoveMember not implemented")
}
func (UnimplementedGroupServiceServer) GroupOvertList(context.Context, *GroupOvertListRequest) (*GroupOvertListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupOvertList not implemented")
}
func (UnimplementedGroupServiceServer) GroupHandover(context.Context, *GroupHandoverRequest) (*GroupHandoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupHandover not implemented")
}
func (UnimplementedGroupServiceServer) GroupAssignAdmin(context.Context, *GroupAssignAdminRequest) (*GroupAssignAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupAssignAdmin not implemented")
}
func (UnimplementedGroupServiceServer) GroupNoSpeak(context.Context, *GroupNoSpeakRequest) (*GroupNoSpeakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupNoSpeak not implemented")
}
func (UnimplementedGroupServiceServer) GroupMute(context.Context, *GroupMuteRequest) (*GroupMuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupMute not implemented")
}
func (UnimplementedGroupServiceServer) GroupOvert(context.Context, *GroupOvertRequest) (*GroupOvertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupOvert not implemented")
}
func (UnimplementedGroupServiceServer) ApplyCreate(context.Context, *ApplyCreateRequest) (*ApplyCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyCreate not implemented")
}
func (UnimplementedGroupServiceServer) ApplyDelete(context.Context, *ApplyDeleteRequest) (*ApplyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyDelete not implemented")
}
func (UnimplementedGroupServiceServer) ApplyAgree(context.Context, *ApplyAgreeRequest) (*ApplyAgreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyAgree not implemented")
}
func (UnimplementedGroupServiceServer) ApplyDecline(context.Context, *ApplyDeclineRequest) (*ApplyDeclineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyDecline not implemented")
}
func (UnimplementedGroupServiceServer) ApplyList(context.Context, *ApplyListRequest) (*ApplyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyList not implemented")
}
func (UnimplementedGroupServiceServer) ApplyAll(context.Context, *ApplyAllRequest) (*ApplyAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyAll not implemented")
}
func (UnimplementedGroupServiceServer) ApplyUnread(context.Context, *ApplyUnreadRequest) (*ApplyUnreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyUnread not implemented")
}
func (UnimplementedGroupServiceServer) NoticeDelete(context.Context, *NoticeDeleteRequest) (*NoticeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeDelete not implemented")
}
func (UnimplementedGroupServiceServer) NoticeEdit(context.Context, *NoticeEditRequest) (*NoticeEditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeEdit not implemented")
}
func (UnimplementedGroupServiceServer) NoticeList(context.Context, *NoticeListRequest) (*NoticeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoticeList not implemented")
}
func (UnimplementedGroupServiceServer) mustEmbedUnimplementedGroupServiceServer() {}
func (UnimplementedGroupServiceServer) testEmbeddedByValue()                      {}

// UnsafeGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServiceServer will
// result in compilation errors.
type UnsafeGroupServiceServer interface {
	mustEmbedUnimplementedGroupServiceServer()
}

func RegisterGroupServiceServer(s grpc.ServiceRegistrar, srv GroupServiceServer) {
	// If the following call pancis, it indicates UnimplementedGroupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GroupService_ServiceDesc, srv)
}

func _GroupService_GroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GroupList(ctx, req.(*GroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GroupCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GroupCreate(ctx, req.(*GroupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GroupDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GroupDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GroupDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GroupDetail(ctx, req.(*GroupDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GroupMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GroupMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GroupMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GroupMemberList(ctx, req.(*GroupMemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GroupDismiss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDismissRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GroupDismiss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GroupDismiss_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GroupDismiss(ctx, req.(*GroupDismissRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GroupInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GroupInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GroupInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GroupInvite(ctx, req.(*GroupInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GetInviteFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInviteFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GetInviteFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GetInviteFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GetInviteFriends(ctx, req.(*GetInviteFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GroupSecede_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupSecedeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GroupSecede(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GroupSecede_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GroupSecede(ctx, req.(*GroupSecedeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GroupSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GroupSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GroupSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GroupSetting(ctx, req.(*GroupSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GroupRemarkUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRemarkUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GroupRemarkUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GroupRemarkUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GroupRemarkUpdate(ctx, req.(*GroupRemarkUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GroupRemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRemoveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GroupRemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GroupRemoveMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GroupRemoveMember(ctx, req.(*GroupRemoveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GroupOvertList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupOvertListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GroupOvertList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GroupOvertList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GroupOvertList(ctx, req.(*GroupOvertListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GroupHandover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupHandoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GroupHandover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GroupHandover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GroupHandover(ctx, req.(*GroupHandoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GroupAssignAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupAssignAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GroupAssignAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GroupAssignAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GroupAssignAdmin(ctx, req.(*GroupAssignAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GroupNoSpeak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupNoSpeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GroupNoSpeak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GroupNoSpeak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GroupNoSpeak(ctx, req.(*GroupNoSpeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GroupMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupMuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GroupMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GroupMute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GroupMute(ctx, req.(*GroupMuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_GroupOvert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupOvertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).GroupOvert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_GroupOvert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).GroupOvert(ctx, req.(*GroupOvertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_ApplyCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).ApplyCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_ApplyCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).ApplyCreate(ctx, req.(*ApplyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_ApplyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).ApplyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_ApplyDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).ApplyDelete(ctx, req.(*ApplyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_ApplyAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyAgreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).ApplyAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_ApplyAgree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).ApplyAgree(ctx, req.(*ApplyAgreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_ApplyDecline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyDeclineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).ApplyDecline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_ApplyDecline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).ApplyDecline(ctx, req.(*ApplyDeclineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_ApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).ApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_ApplyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).ApplyList(ctx, req.(*ApplyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_ApplyAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).ApplyAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_ApplyAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).ApplyAll(ctx, req.(*ApplyAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_ApplyUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyUnreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).ApplyUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_ApplyUnread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).ApplyUnread(ctx, req.(*ApplyUnreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_NoticeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).NoticeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_NoticeDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).NoticeDelete(ctx, req.(*NoticeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_NoticeEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).NoticeEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_NoticeEdit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).NoticeEdit(ctx, req.(*NoticeEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_NoticeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).NoticeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_NoticeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).NoticeList(ctx, req.(*NoticeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupService_ServiceDesc is the grpc.ServiceDesc for GroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "group.v1.GroupService",
	HandlerType: (*GroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GroupList",
			Handler:    _GroupService_GroupList_Handler,
		},
		{
			MethodName: "GroupCreate",
			Handler:    _GroupService_GroupCreate_Handler,
		},
		{
			MethodName: "GroupDetail",
			Handler:    _GroupService_GroupDetail_Handler,
		},
		{
			MethodName: "GroupMemberList",
			Handler:    _GroupService_GroupMemberList_Handler,
		},
		{
			MethodName: "GroupDismiss",
			Handler:    _GroupService_GroupDismiss_Handler,
		},
		{
			MethodName: "GroupInvite",
			Handler:    _GroupService_GroupInvite_Handler,
		},
		{
			MethodName: "GetInviteFriends",
			Handler:    _GroupService_GetInviteFriends_Handler,
		},
		{
			MethodName: "GroupSecede",
			Handler:    _GroupService_GroupSecede_Handler,
		},
		{
			MethodName: "GroupSetting",
			Handler:    _GroupService_GroupSetting_Handler,
		},
		{
			MethodName: "GroupRemarkUpdate",
			Handler:    _GroupService_GroupRemarkUpdate_Handler,
		},
		{
			MethodName: "GroupRemoveMember",
			Handler:    _GroupService_GroupRemoveMember_Handler,
		},
		{
			MethodName: "GroupOvertList",
			Handler:    _GroupService_GroupOvertList_Handler,
		},
		{
			MethodName: "GroupHandover",
			Handler:    _GroupService_GroupHandover_Handler,
		},
		{
			MethodName: "GroupAssignAdmin",
			Handler:    _GroupService_GroupAssignAdmin_Handler,
		},
		{
			MethodName: "GroupNoSpeak",
			Handler:    _GroupService_GroupNoSpeak_Handler,
		},
		{
			MethodName: "GroupMute",
			Handler:    _GroupService_GroupMute_Handler,
		},
		{
			MethodName: "GroupOvert",
			Handler:    _GroupService_GroupOvert_Handler,
		},
		{
			MethodName: "ApplyCreate",
			Handler:    _GroupService_ApplyCreate_Handler,
		},
		{
			MethodName: "ApplyDelete",
			Handler:    _GroupService_ApplyDelete_Handler,
		},
		{
			MethodName: "ApplyAgree",
			Handler:    _GroupService_ApplyAgree_Handler,
		},
		{
			MethodName: "ApplyDecline",
			Handler:    _GroupService_ApplyDecline_Handler,
		},
		{
			MethodName: "ApplyList",
			Handler:    _GroupService_ApplyList_Handler,
		},
		{
			MethodName: "ApplyAll",
			Handler:    _GroupService_ApplyAll_Handler,
		},
		{
			MethodName: "ApplyUnread",
			Handler:    _GroupService_ApplyUnread_Handler,
		},
		{
			MethodName: "NoticeDelete",
			Handler:    _GroupService_NoticeDelete_Handler,
		},
		{
			MethodName: "NoticeEdit",
			Handler:    _GroupService_NoticeEdit_Handler,
		},
		{
			MethodName: "NoticeList",
			Handler:    _GroupService_NoticeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/group/group.proto",
}

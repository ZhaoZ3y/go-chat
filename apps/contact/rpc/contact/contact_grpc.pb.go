// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: idl/contact/contact.proto

package contact

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContactService_List_FullMethodName        = "/contact.ContactService/List"
	ContactService_Delete_FullMethodName      = "/contact.ContactService/Delete"
	ContactService_Detail_FullMethodName      = "/contact.ContactService/Detail"
	ContactService_Search_FullMethodName      = "/contact.ContactService/Search"
	ContactService_ChangeGroup_FullMethodName = "/contact.ContactService/ChangeGroup"
	ContactService_Apply_FullMethodName       = "/contact.ContactService/Apply"
	ContactService_Agree_FullMethodName       = "/contact.ContactService/Agree"
	ContactService_Reject_FullMethodName      = "/contact.ContactService/Reject"
	ContactService_ApplyList_FullMethodName   = "/contact.ContactService/ApplyList"
	ContactService_ApplyUnread_FullMethodName = "/contact.ContactService/ApplyUnread"
	ContactService_GroupCreate_FullMethodName = "/contact.ContactService/GroupCreate"
	ContactService_GroupUpdate_FullMethodName = "/contact.ContactService/GroupUpdate"
	ContactService_GroupDelete_FullMethodName = "/contact.ContactService/GroupDelete"
	ContactService_GroupList_FullMethodName   = "/contact.ContactService/GroupList"
	ContactService_GroupDetail_FullMethodName = "/contact.ContactService/GroupDetail"
)

// ContactServiceClient is the client API for ContactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 联系人服务定义
type ContactServiceClient interface {
	List(ctx context.Context, in *ContactListRequest, opts ...grpc.CallOption) (*ContactListResponse, error)
	Delete(ctx context.Context, in *ContactDeleteRequest, opts ...grpc.CallOption) (*ContactDeleteResponse, error)
	Detail(ctx context.Context, in *ContactDetailRequest, opts ...grpc.CallOption) (*ContactDetailResponse, error)
	Search(ctx context.Context, in *ContactSearchRequest, opts ...grpc.CallOption) (*ContactSearchResponse, error)
	ChangeGroup(ctx context.Context, in *ContactChangeGroupRequest, opts ...grpc.CallOption) (*ContactChangeGroupResponse, error)
	Apply(ctx context.Context, in *ContactApplyRequest, opts ...grpc.CallOption) (*ContactApplyResponse, error)
	Agree(ctx context.Context, in *ContactAgreeRequest, opts ...grpc.CallOption) (*ContactAgreeResponse, error)
	Reject(ctx context.Context, in *ContactRejectRequest, opts ...grpc.CallOption) (*ContactRejectResponse, error)
	ApplyList(ctx context.Context, in *ContactApplyListRequest, opts ...grpc.CallOption) (*ContactApplyListResponse, error)
	ApplyUnread(ctx context.Context, in *ContactApplyUnreadRequest, opts ...grpc.CallOption) (*ContactApplyUnreadResponse, error)
	GroupCreate(ctx context.Context, in *ContactGroupCreateRequest, opts ...grpc.CallOption) (*ContactGroupCreateResponse, error)
	GroupUpdate(ctx context.Context, in *ContactGroupUpdateRequest, opts ...grpc.CallOption) (*ContactGroupUpdateResponse, error)
	GroupDelete(ctx context.Context, in *ContactGroupDeleteRequest, opts ...grpc.CallOption) (*ContactGroupDeleteResponse, error)
	GroupList(ctx context.Context, in *ContactGroupListRequest, opts ...grpc.CallOption) (*ContactGroupListResponse, error)
	GroupDetail(ctx context.Context, in *ContactGroupDetailRequest, opts ...grpc.CallOption) (*ContactGroupDetailResponse, error)
}

type contactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContactServiceClient(cc grpc.ClientConnInterface) ContactServiceClient {
	return &contactServiceClient{cc}
}

func (c *contactServiceClient) List(ctx context.Context, in *ContactListRequest, opts ...grpc.CallOption) (*ContactListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactListResponse)
	err := c.cc.Invoke(ctx, ContactService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) Delete(ctx context.Context, in *ContactDeleteRequest, opts ...grpc.CallOption) (*ContactDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactDeleteResponse)
	err := c.cc.Invoke(ctx, ContactService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) Detail(ctx context.Context, in *ContactDetailRequest, opts ...grpc.CallOption) (*ContactDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactDetailResponse)
	err := c.cc.Invoke(ctx, ContactService_Detail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) Search(ctx context.Context, in *ContactSearchRequest, opts ...grpc.CallOption) (*ContactSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactSearchResponse)
	err := c.cc.Invoke(ctx, ContactService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) ChangeGroup(ctx context.Context, in *ContactChangeGroupRequest, opts ...grpc.CallOption) (*ContactChangeGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactChangeGroupResponse)
	err := c.cc.Invoke(ctx, ContactService_ChangeGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) Apply(ctx context.Context, in *ContactApplyRequest, opts ...grpc.CallOption) (*ContactApplyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactApplyResponse)
	err := c.cc.Invoke(ctx, ContactService_Apply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) Agree(ctx context.Context, in *ContactAgreeRequest, opts ...grpc.CallOption) (*ContactAgreeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactAgreeResponse)
	err := c.cc.Invoke(ctx, ContactService_Agree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) Reject(ctx context.Context, in *ContactRejectRequest, opts ...grpc.CallOption) (*ContactRejectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactRejectResponse)
	err := c.cc.Invoke(ctx, ContactService_Reject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) ApplyList(ctx context.Context, in *ContactApplyListRequest, opts ...grpc.CallOption) (*ContactApplyListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactApplyListResponse)
	err := c.cc.Invoke(ctx, ContactService_ApplyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) ApplyUnread(ctx context.Context, in *ContactApplyUnreadRequest, opts ...grpc.CallOption) (*ContactApplyUnreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactApplyUnreadResponse)
	err := c.cc.Invoke(ctx, ContactService_ApplyUnread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) GroupCreate(ctx context.Context, in *ContactGroupCreateRequest, opts ...grpc.CallOption) (*ContactGroupCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactGroupCreateResponse)
	err := c.cc.Invoke(ctx, ContactService_GroupCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) GroupUpdate(ctx context.Context, in *ContactGroupUpdateRequest, opts ...grpc.CallOption) (*ContactGroupUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactGroupUpdateResponse)
	err := c.cc.Invoke(ctx, ContactService_GroupUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) GroupDelete(ctx context.Context, in *ContactGroupDeleteRequest, opts ...grpc.CallOption) (*ContactGroupDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactGroupDeleteResponse)
	err := c.cc.Invoke(ctx, ContactService_GroupDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) GroupList(ctx context.Context, in *ContactGroupListRequest, opts ...grpc.CallOption) (*ContactGroupListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactGroupListResponse)
	err := c.cc.Invoke(ctx, ContactService_GroupList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactServiceClient) GroupDetail(ctx context.Context, in *ContactGroupDetailRequest, opts ...grpc.CallOption) (*ContactGroupDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContactGroupDetailResponse)
	err := c.cc.Invoke(ctx, ContactService_GroupDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactServiceServer is the server API for ContactService service.
// All implementations must embed UnimplementedContactServiceServer
// for forward compatibility.
//
// 联系人服务定义
type ContactServiceServer interface {
	List(context.Context, *ContactListRequest) (*ContactListResponse, error)
	Delete(context.Context, *ContactDeleteRequest) (*ContactDeleteResponse, error)
	Detail(context.Context, *ContactDetailRequest) (*ContactDetailResponse, error)
	Search(context.Context, *ContactSearchRequest) (*ContactSearchResponse, error)
	ChangeGroup(context.Context, *ContactChangeGroupRequest) (*ContactChangeGroupResponse, error)
	Apply(context.Context, *ContactApplyRequest) (*ContactApplyResponse, error)
	Agree(context.Context, *ContactAgreeRequest) (*ContactAgreeResponse, error)
	Reject(context.Context, *ContactRejectRequest) (*ContactRejectResponse, error)
	ApplyList(context.Context, *ContactApplyListRequest) (*ContactApplyListResponse, error)
	ApplyUnread(context.Context, *ContactApplyUnreadRequest) (*ContactApplyUnreadResponse, error)
	GroupCreate(context.Context, *ContactGroupCreateRequest) (*ContactGroupCreateResponse, error)
	GroupUpdate(context.Context, *ContactGroupUpdateRequest) (*ContactGroupUpdateResponse, error)
	GroupDelete(context.Context, *ContactGroupDeleteRequest) (*ContactGroupDeleteResponse, error)
	GroupList(context.Context, *ContactGroupListRequest) (*ContactGroupListResponse, error)
	GroupDetail(context.Context, *ContactGroupDetailRequest) (*ContactGroupDetailResponse, error)
	mustEmbedUnimplementedContactServiceServer()
}

// UnimplementedContactServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContactServiceServer struct{}

func (UnimplementedContactServiceServer) List(context.Context, *ContactListRequest) (*ContactListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedContactServiceServer) Delete(context.Context, *ContactDeleteRequest) (*ContactDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedContactServiceServer) Detail(context.Context, *ContactDetailRequest) (*ContactDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (UnimplementedContactServiceServer) Search(context.Context, *ContactSearchRequest) (*ContactSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedContactServiceServer) ChangeGroup(context.Context, *ContactChangeGroupRequest) (*ContactChangeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeGroup not implemented")
}
func (UnimplementedContactServiceServer) Apply(context.Context, *ContactApplyRequest) (*ContactApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedContactServiceServer) Agree(context.Context, *ContactAgreeRequest) (*ContactAgreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Agree not implemented")
}
func (UnimplementedContactServiceServer) Reject(context.Context, *ContactRejectRequest) (*ContactRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reject not implemented")
}
func (UnimplementedContactServiceServer) ApplyList(context.Context, *ContactApplyListRequest) (*ContactApplyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyList not implemented")
}
func (UnimplementedContactServiceServer) ApplyUnread(context.Context, *ContactApplyUnreadRequest) (*ContactApplyUnreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyUnread not implemented")
}
func (UnimplementedContactServiceServer) GroupCreate(context.Context, *ContactGroupCreateRequest) (*ContactGroupCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupCreate not implemented")
}
func (UnimplementedContactServiceServer) GroupUpdate(context.Context, *ContactGroupUpdateRequest) (*ContactGroupUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupUpdate not implemented")
}
func (UnimplementedContactServiceServer) GroupDelete(context.Context, *ContactGroupDeleteRequest) (*ContactGroupDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDelete not implemented")
}
func (UnimplementedContactServiceServer) GroupList(context.Context, *ContactGroupListRequest) (*ContactGroupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupList not implemented")
}
func (UnimplementedContactServiceServer) GroupDetail(context.Context, *ContactGroupDetailRequest) (*ContactGroupDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDetail not implemented")
}
func (UnimplementedContactServiceServer) mustEmbedUnimplementedContactServiceServer() {}
func (UnimplementedContactServiceServer) testEmbeddedByValue()                        {}

// UnsafeContactServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactServiceServer will
// result in compilation errors.
type UnsafeContactServiceServer interface {
	mustEmbedUnimplementedContactServiceServer()
}

func RegisterContactServiceServer(s grpc.ServiceRegistrar, srv ContactServiceServer) {
	// If the following call pancis, it indicates UnimplementedContactServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContactService_ServiceDesc, srv)
}

func _ContactService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).List(ctx, req.(*ContactListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).Delete(ctx, req.(*ContactDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_Detail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).Detail(ctx, req.(*ContactDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).Search(ctx, req.(*ContactSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_ChangeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactChangeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).ChangeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_ChangeGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).ChangeGroup(ctx, req.(*ContactChangeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_Apply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).Apply(ctx, req.(*ContactApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_Agree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactAgreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).Agree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_Agree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).Agree(ctx, req.(*ContactAgreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_Reject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).Reject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_Reject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).Reject(ctx, req.(*ContactRejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_ApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactApplyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).ApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_ApplyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).ApplyList(ctx, req.(*ContactApplyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_ApplyUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactApplyUnreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).ApplyUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_ApplyUnread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).ApplyUnread(ctx, req.(*ContactApplyUnreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_GroupCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactGroupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).GroupCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_GroupCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).GroupCreate(ctx, req.(*ContactGroupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_GroupUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactGroupUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).GroupUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_GroupUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).GroupUpdate(ctx, req.(*ContactGroupUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_GroupDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactGroupDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).GroupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_GroupDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).GroupDelete(ctx, req.(*ContactGroupDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_GroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).GroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_GroupList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).GroupList(ctx, req.(*ContactGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactService_GroupDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactGroupDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).GroupDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContactService_GroupDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).GroupDetail(ctx, req.(*ContactGroupDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactService_ServiceDesc is the grpc.ServiceDesc for ContactService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contact.ContactService",
	HandlerType: (*ContactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ContactService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ContactService_Delete_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _ContactService_Detail_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _ContactService_Search_Handler,
		},
		{
			MethodName: "ChangeGroup",
			Handler:    _ContactService_ChangeGroup_Handler,
		},
		{
			MethodName: "Apply",
			Handler:    _ContactService_Apply_Handler,
		},
		{
			MethodName: "Agree",
			Handler:    _ContactService_Agree_Handler,
		},
		{
			MethodName: "Reject",
			Handler:    _ContactService_Reject_Handler,
		},
		{
			MethodName: "ApplyList",
			Handler:    _ContactService_ApplyList_Handler,
		},
		{
			MethodName: "ApplyUnread",
			Handler:    _ContactService_ApplyUnread_Handler,
		},
		{
			MethodName: "GroupCreate",
			Handler:    _ContactService_GroupCreate_Handler,
		},
		{
			MethodName: "GroupUpdate",
			Handler:    _ContactService_GroupUpdate_Handler,
		},
		{
			MethodName: "GroupDelete",
			Handler:    _ContactService_GroupDelete_Handler,
		},
		{
			MethodName: "GroupList",
			Handler:    _ContactService_GroupList_Handler,
		},
		{
			MethodName: "GroupDetail",
			Handler:    _ContactService_GroupDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/contact/contact.proto",
}

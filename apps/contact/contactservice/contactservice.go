// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: contact.proto

package contactservice

import (
	"context"

	"IM/apps/contact/rpc/contact"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ContactAgreeRequest           = contact.ContactAgreeRequest
	ContactAgreeResponse          = contact.ContactAgreeResponse
	ContactApplyListRequest       = contact.ContactApplyListRequest
	ContactApplyListResponse      = contact.ContactApplyListResponse
	ContactApplyListResponse_Item = contact.ContactApplyListResponse_Item
	ContactApplyRequest           = contact.ContactApplyRequest
	ContactApplyResponse          = contact.ContactApplyResponse
	ContactApplyUnreadRequest     = contact.ContactApplyUnreadRequest
	ContactApplyUnreadResponse    = contact.ContactApplyUnreadResponse
	ContactChangeGroupRequest     = contact.ContactChangeGroupRequest
	ContactChangeGroupResponse    = contact.ContactChangeGroupResponse
	ContactDeleteRequest          = contact.ContactDeleteRequest
	ContactDeleteResponse         = contact.ContactDeleteResponse
	ContactDetailRequest          = contact.ContactDetailRequest
	ContactDetailResponse         = contact.ContactDetailResponse
	ContactGroupCreateRequest     = contact.ContactGroupCreateRequest
	ContactGroupCreateResponse    = contact.ContactGroupCreateResponse
	ContactGroupDeleteRequest     = contact.ContactGroupDeleteRequest
	ContactGroupDeleteResponse    = contact.ContactGroupDeleteResponse
	ContactGroupDetailRequest     = contact.ContactGroupDetailRequest
	ContactGroupDetailResponse    = contact.ContactGroupDetailResponse
	ContactGroupListRequest       = contact.ContactGroupListRequest
	ContactGroupListResponse      = contact.ContactGroupListResponse
	ContactGroupListResponse_Item = contact.ContactGroupListResponse_Item
	ContactGroupUpdateRequest     = contact.ContactGroupUpdateRequest
	ContactGroupUpdateResponse    = contact.ContactGroupUpdateResponse
	ContactListRequest            = contact.ContactListRequest
	ContactListResponse           = contact.ContactListResponse
	ContactListResponse_Item      = contact.ContactListResponse_Item
	ContactRejectRequest          = contact.ContactRejectRequest
	ContactRejectResponse         = contact.ContactRejectResponse
	ContactSearchRequest          = contact.ContactSearchRequest
	ContactSearchResponse         = contact.ContactSearchResponse
	ContactSearchResponse_Item    = contact.ContactSearchResponse_Item

	ContactService interface {
		List(ctx context.Context, in *ContactListRequest, opts ...grpc.CallOption) (*ContactListResponse, error)
		Delete(ctx context.Context, in *ContactDeleteRequest, opts ...grpc.CallOption) (*ContactDeleteResponse, error)
		Detail(ctx context.Context, in *ContactDetailRequest, opts ...grpc.CallOption) (*ContactDetailResponse, error)
		Search(ctx context.Context, in *ContactSearchRequest, opts ...grpc.CallOption) (*ContactSearchResponse, error)
		ChangeGroup(ctx context.Context, in *ContactChangeGroupRequest, opts ...grpc.CallOption) (*ContactChangeGroupResponse, error)
		Apply(ctx context.Context, in *ContactApplyRequest, opts ...grpc.CallOption) (*ContactApplyResponse, error)
		Agree(ctx context.Context, in *ContactAgreeRequest, opts ...grpc.CallOption) (*ContactAgreeResponse, error)
		Reject(ctx context.Context, in *ContactRejectRequest, opts ...grpc.CallOption) (*ContactRejectResponse, error)
		ApplyList(ctx context.Context, in *ContactApplyListRequest, opts ...grpc.CallOption) (*ContactApplyListResponse, error)
		ApplyUnread(ctx context.Context, in *ContactApplyUnreadRequest, opts ...grpc.CallOption) (*ContactApplyUnreadResponse, error)
		GroupCreate(ctx context.Context, in *ContactGroupCreateRequest, opts ...grpc.CallOption) (*ContactGroupCreateResponse, error)
		GroupUpdate(ctx context.Context, in *ContactGroupUpdateRequest, opts ...grpc.CallOption) (*ContactGroupUpdateResponse, error)
		GroupDelete(ctx context.Context, in *ContactGroupDeleteRequest, opts ...grpc.CallOption) (*ContactGroupDeleteResponse, error)
		GroupList(ctx context.Context, in *ContactGroupListRequest, opts ...grpc.CallOption) (*ContactGroupListResponse, error)
		GroupDetail(ctx context.Context, in *ContactGroupDetailRequest, opts ...grpc.CallOption) (*ContactGroupDetailResponse, error)
	}

	defaultContactService struct {
		cli zrpc.Client
	}
)

func NewContactService(cli zrpc.Client) ContactService {
	return &defaultContactService{
		cli: cli,
	}
}

func (m *defaultContactService) List(ctx context.Context, in *ContactListRequest, opts ...grpc.CallOption) (*ContactListResponse, error) {
	client := contact.NewContactServiceClient(m.cli.Conn())
	return client.List(ctx, in, opts...)
}

func (m *defaultContactService) Delete(ctx context.Context, in *ContactDeleteRequest, opts ...grpc.CallOption) (*ContactDeleteResponse, error) {
	client := contact.NewContactServiceClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultContactService) Detail(ctx context.Context, in *ContactDetailRequest, opts ...grpc.CallOption) (*ContactDetailResponse, error) {
	client := contact.NewContactServiceClient(m.cli.Conn())
	return client.Detail(ctx, in, opts...)
}

func (m *defaultContactService) Search(ctx context.Context, in *ContactSearchRequest, opts ...grpc.CallOption) (*ContactSearchResponse, error) {
	client := contact.NewContactServiceClient(m.cli.Conn())
	return client.Search(ctx, in, opts...)
}

func (m *defaultContactService) ChangeGroup(ctx context.Context, in *ContactChangeGroupRequest, opts ...grpc.CallOption) (*ContactChangeGroupResponse, error) {
	client := contact.NewContactServiceClient(m.cli.Conn())
	return client.ChangeGroup(ctx, in, opts...)
}

func (m *defaultContactService) Apply(ctx context.Context, in *ContactApplyRequest, opts ...grpc.CallOption) (*ContactApplyResponse, error) {
	client := contact.NewContactServiceClient(m.cli.Conn())
	return client.Apply(ctx, in, opts...)
}

func (m *defaultContactService) Agree(ctx context.Context, in *ContactAgreeRequest, opts ...grpc.CallOption) (*ContactAgreeResponse, error) {
	client := contact.NewContactServiceClient(m.cli.Conn())
	return client.Agree(ctx, in, opts...)
}

func (m *defaultContactService) Reject(ctx context.Context, in *ContactRejectRequest, opts ...grpc.CallOption) (*ContactRejectResponse, error) {
	client := contact.NewContactServiceClient(m.cli.Conn())
	return client.Reject(ctx, in, opts...)
}

func (m *defaultContactService) ApplyList(ctx context.Context, in *ContactApplyListRequest, opts ...grpc.CallOption) (*ContactApplyListResponse, error) {
	client := contact.NewContactServiceClient(m.cli.Conn())
	return client.ApplyList(ctx, in, opts...)
}

func (m *defaultContactService) ApplyUnread(ctx context.Context, in *ContactApplyUnreadRequest, opts ...grpc.CallOption) (*ContactApplyUnreadResponse, error) {
	client := contact.NewContactServiceClient(m.cli.Conn())
	return client.ApplyUnread(ctx, in, opts...)
}

func (m *defaultContactService) GroupCreate(ctx context.Context, in *ContactGroupCreateRequest, opts ...grpc.CallOption) (*ContactGroupCreateResponse, error) {
	client := contact.NewContactServiceClient(m.cli.Conn())
	return client.GroupCreate(ctx, in, opts...)
}

func (m *defaultContactService) GroupUpdate(ctx context.Context, in *ContactGroupUpdateRequest, opts ...grpc.CallOption) (*ContactGroupUpdateResponse, error) {
	client := contact.NewContactServiceClient(m.cli.Conn())
	return client.GroupUpdate(ctx, in, opts...)
}

func (m *defaultContactService) GroupDelete(ctx context.Context, in *ContactGroupDeleteRequest, opts ...grpc.CallOption) (*ContactGroupDeleteResponse, error) {
	client := contact.NewContactServiceClient(m.cli.Conn())
	return client.GroupDelete(ctx, in, opts...)
}

func (m *defaultContactService) GroupList(ctx context.Context, in *ContactGroupListRequest, opts ...grpc.CallOption) (*ContactGroupListResponse, error) {
	client := contact.NewContactServiceClient(m.cli.Conn())
	return client.GroupList(ctx, in, opts...)
}

func (m *defaultContactService) GroupDetail(ctx context.Context, in *ContactGroupDetailRequest, opts ...grpc.CallOption) (*ContactGroupDetailResponse, error) {
	client := contact.NewContactServiceClient(m.cli.Conn())
	return client.GroupDetail(ctx, in, opts...)
}

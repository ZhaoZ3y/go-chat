// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: contact.proto

package server

import (
	"context"

	"IM/apps/contact/internal/logic"
	"IM/apps/contact/internal/svc"
	"IM/apps/contact/rpc/contact"
)

type ContactServiceServer struct {
	svcCtx *svc.ServiceContext
	contact.UnimplementedContactServiceServer
}

func NewContactServiceServer(svcCtx *svc.ServiceContext) *ContactServiceServer {
	return &ContactServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *ContactServiceServer) List(ctx context.Context, in *contact.ContactListRequest) (*contact.ContactListResponse, error) {
	l := logic.NewListLogic(ctx, s.svcCtx)
	return l.List(in)
}

func (s *ContactServiceServer) Delete(ctx context.Context, in *contact.ContactDeleteRequest) (*contact.ContactDeleteResponse, error) {
	l := logic.NewDeleteLogic(ctx, s.svcCtx)
	return l.Delete(in)
}

func (s *ContactServiceServer) Detail(ctx context.Context, in *contact.ContactDetailRequest) (*contact.ContactDetailResponse, error) {
	l := logic.NewDetailLogic(ctx, s.svcCtx)
	return l.Detail(in)
}

func (s *ContactServiceServer) Search(ctx context.Context, in *contact.ContactSearchRequest) (*contact.ContactSearchResponse, error) {
	l := logic.NewSearchLogic(ctx, s.svcCtx)
	return l.Search(in)
}

func (s *ContactServiceServer) ChangeGroup(ctx context.Context, in *contact.ContactChangeGroupRequest) (*contact.ContactChangeGroupResponse, error) {
	l := logic.NewChangeGroupLogic(ctx, s.svcCtx)
	return l.ChangeGroup(in)
}

func (s *ContactServiceServer) Apply(ctx context.Context, in *contact.ContactApplyRequest) (*contact.ContactApplyResponse, error) {
	l := logic.NewApplyLogic(ctx, s.svcCtx)
	return l.Apply(in)
}

func (s *ContactServiceServer) Agree(ctx context.Context, in *contact.ContactAgreeRequest) (*contact.ContactAgreeResponse, error) {
	l := logic.NewAgreeLogic(ctx, s.svcCtx)
	return l.Agree(in)
}

func (s *ContactServiceServer) Reject(ctx context.Context, in *contact.ContactRejectRequest) (*contact.ContactRejectResponse, error) {
	l := logic.NewRejectLogic(ctx, s.svcCtx)
	return l.Reject(in)
}

func (s *ContactServiceServer) ApplyList(ctx context.Context, in *contact.ContactApplyListRequest) (*contact.ContactApplyListResponse, error) {
	l := logic.NewApplyListLogic(ctx, s.svcCtx)
	return l.ApplyList(in)
}

func (s *ContactServiceServer) ApplyUnread(ctx context.Context, in *contact.ContactApplyUnreadRequest) (*contact.ContactApplyUnreadResponse, error) {
	l := logic.NewApplyUnreadLogic(ctx, s.svcCtx)
	return l.ApplyUnread(in)
}

func (s *ContactServiceServer) GroupCreate(ctx context.Context, in *contact.ContactGroupCreateRequest) (*contact.ContactGroupCreateResponse, error) {
	l := logic.NewGroupCreateLogic(ctx, s.svcCtx)
	return l.GroupCreate(in)
}

func (s *ContactServiceServer) GroupUpdate(ctx context.Context, in *contact.ContactGroupUpdateRequest) (*contact.ContactGroupUpdateResponse, error) {
	l := logic.NewGroupUpdateLogic(ctx, s.svcCtx)
	return l.GroupUpdate(in)
}

func (s *ContactServiceServer) GroupDelete(ctx context.Context, in *contact.ContactGroupDeleteRequest) (*contact.ContactGroupDeleteResponse, error) {
	l := logic.NewGroupDeleteLogic(ctx, s.svcCtx)
	return l.GroupDelete(in)
}

func (s *ContactServiceServer) GroupList(ctx context.Context, in *contact.ContactGroupListRequest) (*contact.ContactGroupListResponse, error) {
	l := logic.NewGroupListLogic(ctx, s.svcCtx)
	return l.GroupList(in)
}

func (s *ContactServiceServer) GroupDetail(ctx context.Context, in *contact.ContactGroupDetailRequest) (*contact.ContactGroupDetailResponse, error) {
	l := logic.NewGroupDetailLogic(ctx, s.svcCtx)
	return l.GroupDetail(in)
}

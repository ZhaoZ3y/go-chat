// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: auth.proto

package authservice

import (
	"context"

	"IM/apps/auth/rpc/auth"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AccessToken          = auth.AccessToken
	AuthLoginRequest     = auth.AuthLoginRequest
	AuthLoginResponse    = auth.AuthLoginResponse
	AuthLogoutRequest    = auth.AuthLogoutRequest
	AuthLogoutResponse   = auth.AuthLogoutResponse
	AuthRefreshRequest   = auth.AuthRefreshRequest
	AuthRefreshResponse  = auth.AuthRefreshResponse
	AuthRegisterRequest  = auth.AuthRegisterRequest
	AuthRegisterResponse = auth.AuthRegisterResponse

	AuthService interface {
		// 登录
		Login(ctx context.Context, in *AuthLoginRequest, opts ...grpc.CallOption) (*AuthLoginResponse, error)
		// 注销登录
		Logout(ctx context.Context, in *AuthLogoutRequest, opts ...grpc.CallOption) (*AuthLogoutResponse, error)
		// 刷新Token
		Refresh(ctx context.Context, in *AuthRefreshRequest, opts ...grpc.CallOption) (*AuthRefreshResponse, error)
		// 注册
		Register(ctx context.Context, in *AuthRegisterRequest, opts ...grpc.CallOption) (*AuthRegisterResponse, error)
	}

	defaultAuthService struct {
		cli zrpc.Client
	}
)

func NewAuthService(cli zrpc.Client) AuthService {
	return &defaultAuthService{
		cli: cli,
	}
}

// 登录
func (m *defaultAuthService) Login(ctx context.Context, in *AuthLoginRequest, opts ...grpc.CallOption) (*AuthLoginResponse, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 注销登录
func (m *defaultAuthService) Logout(ctx context.Context, in *AuthLogoutRequest, opts ...grpc.CallOption) (*AuthLogoutResponse, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

// 刷新Token
func (m *defaultAuthService) Refresh(ctx context.Context, in *AuthRefreshRequest, opts ...grpc.CallOption) (*AuthRefreshResponse, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.Refresh(ctx, in, opts...)
}

// 注册
func (m *defaultAuthService) Register(ctx context.Context, in *AuthRegisterRequest, opts ...grpc.CallOption) (*AuthRegisterResponse, error) {
	client := auth.NewAuthServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}
